
Ruta: app\(auth)\forgot-password\page.tsx
// app/(auth)/forgot-password/page.tsx
"use client";

import { useState } from "react";
import { AuthLayout } from "@/components/auth/auth-layout";
import { AuthForm } from "@/components/auth/auth-form";
import { FormField, FormLabel } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import Link from "next/link";

export default function ForgotPasswordPage() {
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);

    try {
      // Aquí se implementará el envío del correo cuando se tenga el backend
      setSuccess(true);
    } catch (error) {
      setError("Ocurrió un error al intentar enviar el correo");
    }
  }

  if (success) {
    return (
      <AuthLayout
        title="Revisa tu correo"
        subtitle="Te hemos enviado un enlace para restablecer tu contraseña"
      >
        <div className="text-center mt-4">
          <Link
            href="/login"
            className="text-primary hover:text-primary-hover font-medium"
          >
            Volver al inicio de sesión
          </Link>
        </div>
      </AuthLayout>
    );
  }

  return (
    <AuthLayout
      title="Recuperar contraseña"
      subtitle="Te enviaremos un correo con instrucciones"
    >
      <AuthForm
        onSubmit={handleSubmit}
        error={error}
        submitText="Enviar instrucciones"
      >
        <FormField>
          <FormLabel htmlFor="email">Correo electrónico</FormLabel>
          <Input
            id="email"
            name="email"
            type="email"
            required
            placeholder="tu@email.com"
          />
        </FormField>

        <div className="text-sm text-center">
          <Link
            href="/login"
            className="text-primary hover:text-primary-hover font-medium"
          >
            Volver al inicio de sesión
          </Link>
        </div>
      </AuthForm>
    </AuthLayout>
  );
}


Ruta: app\(auth)\login\page.tsx
// app/(auth)/login/page.tsx
"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { signIn } from "next-auth/react"; // Importación correcta
import { AuthLayout } from "@/components/auth/auth-layout";
import { AuthForm } from "@/components/auth/auth-form";
import { FormField, FormLabel } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { ProvidersButtons } from "@/components/auth/providers-buttons";
import Link from "next/link";

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [error, setError] = useState<string | null>(
    searchParams.get("error") === "CredentialsSignin"
      ? "Credenciales inválidas"
      : null
  );
  const [isLoading, setIsLoading] = useState(false);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsLoading(true);
    setError(null);

    const formData = new FormData(event.currentTarget);
    const email = formData.get("email") as string;
    const password = formData.get("password") as string;

    try {
      const result = await signIn("credentials", {
        email,
        password,
        redirect: false,
      });

      if (result?.error) {
        setError("Credenciales inválidas");
        setIsLoading(false);
        return;
      }

      router.push("/dashboard");
      router.refresh();
    } catch (error) {
      setError("Ocurrió un error al intentar iniciar sesión");
    } finally {
      setIsLoading(false);
    }
  }

  const handleGoogleLogin = () => {
    signIn("google", { callbackUrl: "/dashboard" });
  };

  const handleGithubLogin = () => {
    signIn("github", { callbackUrl: "/dashboard" });
  };

  return (
    <AuthLayout
      title="Iniciar sesión"
      subtitle="¡Bienvenido de vuelta! Por favor, ingresa tus credenciales."
    >
      <AuthForm
        onSubmit={handleSubmit}
        error={error}
        isLoading={isLoading}
        submitText="Iniciar sesión"
        footerContent="O continúa con"
      >
        <FormField>
          <FormLabel>Correo electrónico</FormLabel>
          <Input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            placeholder="tu@email.com"
            disabled={isLoading}
          />
        </FormField>

        <FormField>
          <FormLabel>Contraseña</FormLabel>
          <Input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            placeholder="••••••••"
            disabled={isLoading}
          />
        </FormField>

        <div className="flex items-center justify-between">
          <Link
            href="/forgot-password"
            className="text-sm font-medium text-primary hover:text-primary-hover"
          >
            ¿Olvidaste tu contraseña?
          </Link>
          <Link
            href="/register"
            className="text-sm font-medium text-primary hover:text-primary-hover"
          >
            Crear cuenta
          </Link>
        </div>

        <ProvidersButtons
          onGoogleClick={handleGoogleLogin}
          onGithubClick={handleGithubLogin}
          isLoading={isLoading}
        />
      </AuthForm>
    </AuthLayout>
  );
}


Ruta: app\(auth)\register\page.tsx
// app/(auth)/register/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { AuthLayout } from "@/components/auth/auth-layout";
import { AuthForm } from "@/components/auth/auth-form";
import { FormField, FormLabel } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { ProvidersButtons } from "@/components/auth/providers-buttons";
import Link from "next/link";
import { signIn } from "@/auth";

export default function RegisterPage() {
  const router = useRouter();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsLoading(true);
    const formData = new FormData(event.currentTarget);
    const password = formData.get("password") as string;
    const confirmPassword = formData.get("confirmPassword") as string;

    if (password !== confirmPassword) {
      setError("Las contraseñas no coinciden");
      setIsLoading(false);
      return;
    }

    try {
      // Aquí se implementaría el registro en el backend.
      router.push("/login");
    } catch (error) {
      setError("Ocurrió un error al intentar registrarse");
    } finally {
      setIsLoading(false);
    }
  }

  const handleGoogleRegister = () => {
    signIn("google", { callbackUrl: "/dashboard" });
  };

  const handleGithubRegister = () => {
    signIn("github", { callbackUrl: "/dashboard" });
  };

  return (
    <AuthLayout
      title="Crear cuenta"
      subtitle="¡Bienvenido! Por favor, completa tus datos para comenzar."
      showDemoAlert={false}
    >
      <AuthForm
        onSubmit={handleSubmit}
        error={error}
        isLoading={isLoading}
        submitText="Crear cuenta"
        footerContent="O continúa con"
      >
        <FormField>
          <FormLabel>Nombre completo</FormLabel>
          <Input
            id="name"
            name="name"
            type="text"
            required
            placeholder="John Doe"
            disabled={isLoading}
          />
        </FormField>

        <FormField>
          <FormLabel>Correo electrónico</FormLabel>
          <Input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            placeholder="tu@email.com"
            disabled={isLoading}
          />
        </FormField>

        <FormField>
          <FormLabel>Contraseña</FormLabel>
          <Input
            id="password"
            name="password"
            type="password"
            autoComplete="new-password"
            required
            placeholder="••••••••"
            disabled={isLoading}
          />
        </FormField>

        <FormField>
          <FormLabel>Confirmar contraseña</FormLabel>
          <Input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            autoComplete="new-password"
            required
            placeholder="••••••••"
            disabled={isLoading}
          />
        </FormField>

        <div className="flex items-center justify-end">
          <Link
            href="/login"
            className="text-sm font-medium text-primary hover:text-primary-hover"
          >
            ¿Ya tienes una cuenta? Inicia sesión
          </Link>
        </div>

        <ProvidersButtons
          onGoogleClick={handleGoogleRegister}
          onGithubClick={handleGithubRegister}
          isLoading={isLoading}
        />
      </AuthForm>
    </AuthLayout>
  );
}


Ruta: app\(auth)\reset-password\page.tsx
"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { AuthLayout } from "@/components/auth/auth-layout";
import { AuthForm } from "@/components/auth/auth-form";
import { FormField, FormLabel, FormDescription } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { CheckCircleIcon, XCircleIcon } from "lucide-react";
import Link from "next/link";

export default function ResetPasswordPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [success, setSuccess] = useState(false);

  // Validar token (ejemplo simple)
  const token = searchParams.get("token");
  const isValidToken = token?.length === 32;

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsLoading(true);
    const formData = new FormData(event.currentTarget);
    const password = formData.get("password") as string;
    const confirmPassword = formData.get("confirmPassword") as string;

    if (password !== confirmPassword) {
      setError("Las contraseñas no coinciden");
      setIsLoading(false);
      return;
    }

    try {
      // Simulación de delay para resetear contraseña
      await new Promise((resolve) => setTimeout(resolve, 1000));
      setSuccess(true);
      setTimeout(() => {
        router.push("/login");
      }, 3000);
    } catch (error) {
      setError("Ocurrió un error al intentar restablecer la contraseña");
    } finally {
      setIsLoading(false);
    }
  }

  if (!isValidToken) {
    return (
      <AuthLayout
        title="Enlace inválido"
        subtitle="Este enlace para restablecer la contraseña no es válido o ha expirado"
        showDemoAlert={false}
      >
        <div className="bg-background rounded-xl border border-border p-8 text-center space-y-6">
          <div className="mx-auto w-12 h-12 rounded-full bg-error/10 flex items-center justify-center">
            <XCircleIcon className="w-6 h-6 text-error" />
          </div>
          <p className="text-sm text-content">
            Por favor, solicita un nuevo enlace para restablecer tu contraseña.
          </p>
          <Link
            href="/forgot-password"
            className="text-primary hover:text-primary-hover font-medium block"
          >
            Solicitar nuevo enlace
          </Link>
        </div>
      </AuthLayout>
    );
  }

  if (success) {
    return (
      <AuthLayout
        title="¡Contraseña actualizada!"
        subtitle="Tu contraseña ha sido restablecida exitosamente"
        showDemoAlert={false}
      >
        <div className="bg-background rounded-xl border border-border p-8 text-center space-y-6">
          <div className="mx-auto w-12 h-12 rounded-full bg-success/10 flex items-center justify-center">
            <CheckCircleIcon className="w-6 h-6 text-success" />
          </div>
          <p className="text-sm text-content">
            Serás redirigido al inicio de sesión en unos segundos...
          </p>
          <Link
            href="/login"
            className="text-primary hover:text-primary-hover font-medium block"
          >
            Ir al inicio de sesión
          </Link>
        </div>
      </AuthLayout>
    );
  }

  return (
    <AuthLayout
      title="Restablecer contraseña"
      subtitle="Ingresa y confirma tu nueva contraseña"
      showDemoAlert={false}
    >
      <AuthForm
        onSubmit={handleSubmit}
        error={error}
        isLoading={isLoading}
        submitText="Guardar nueva contraseña"
      >
        <FormField>
          <FormLabel htmlFor="password">Nueva contraseña</FormLabel>
          <Input
            id="password"
            name="password"
            type="password"
            required
            placeholder="••••••••"
            disabled={isLoading}
          />
          <FormDescription>
            La contraseña debe tener al menos 8 caracteres
          </FormDescription>
        </FormField>
        <FormField>
          <FormLabel htmlFor="confirmPassword">Confirmar contraseña</FormLabel>
          <Input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            required
            placeholder="••••••••"
            disabled={isLoading}
          />
        </FormField>
        <input type="hidden" name="token" value={token ?? ""} />
      </AuthForm>
    </AuthLayout>
  );
}


Ruta: app\(dashboard)\dashboard\analytics\page.tsx
// app/(dashboard)/dashboard/analytics/page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  AreaChart,
  Area,
} from "recharts";
import { DateRangePicker } from "@/components/dashboard/date-range-picker";
import {
  Download,
  TrendingUp,
  TrendingDown,
  Users,
  DollarSign,
  Clock,
  ArrowRight,
} from "lucide-react";

const visitData = [
  { name: "Ene", visits: 4000, uniqueUsers: 2400 },
  { name: "Feb", visits: 3000, uniqueUsers: 1398 },
  { name: "Mar", visits: 2000, uniqueUsers: 9800 },
  { name: "Abr", visits: 2780, uniqueUsers: 3908 },
  { name: "May", visits: 1890, uniqueUsers: 4800 },
  { name: "Jun", visits: 2390, uniqueUsers: 3800 },
  { name: "Jul", visits: 3490, uniqueUsers: 4300 },
];

const conversionData = [
  { name: "Social", value: 400 },
  { name: "Directo", value: 300 },
  { name: "Email", value: 300 },
  { name: "Otros", value: 200 },
];

const timeData = [
  { time: "00:00", active: 200 },
  { time: "03:00", active: 150 },
  { time: "06:00", active: 300 },
  { time: "09:00", active: 800 },
  { time: "12:00", active: 1000 },
  { time: "15:00", active: 900 },
  { time: "18:00", active: 700 },
  { time: "21:00", active: 400 },
];

const metrics = [
  {
    title: "Visitantes únicos",
    value: "2,345",
    change: "+14.5%",
    trend: "up",
    icon: Users,
  },
  {
    title: "Tiempo promedio",
    value: "4m 32s",
    change: "-1.5%",
    trend: "down",
    icon: Clock,
  },
  {
    title: "Ingresos",
    value: "$12,345",
    change: "+32.5%",
    trend: "up",
    icon: DollarSign,
  },
];

export default function AnalyticsPage() {
  const [dateRange, setDateRange] = useState({
    start: new Date(),
    end: new Date(),
  });

  return (
    <div className="space-y-8">
      {/* Header con título y controles */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-content-emphasis">
            Analytics
          </h1>
          <p className="text-content-subtle mt-2">
            Métricas y estadísticas de tu aplicación
          </p>
        </div>

        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <DateRangePicker
            value={dateRange}
            onChange={setDateRange}
            className="w-full sm:w-auto"
          />
          <Button variant="outline" size="icon">
            <Download className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Métricas principales */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {metrics.map((metric) => (
          <Card key={metric.title} className="p-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <div className="p-2 bg-primary/10 rounded-lg">
                  <metric.icon className="h-5 w-5 text-primary" />
                </div>
                <h3 className="text-sm font-medium text-gray-500">
                  {metric.title}
                </h3>
              </div>
            </div>
            <div className="mt-4">
              <div className="text-2xl font-semibold">{metric.value}</div>
              <div className="flex items-center mt-1">
                {metric.trend === "up" ? (
                  <TrendingUp className="h-4 w-4 text-green-500" />
                ) : (
                  <TrendingDown className="h-4 w-4 text-red-500" />
                )}
                <span
                  className={
                    metric.trend === "up" ? "text-green-500" : "text-red-500"
                  }
                >
                  {metric.change}
                </span>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {/* Gráficos principales */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Visitas vs Usuarios únicos */}
        <Card className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">
              Visitas vs Usuarios únicos
            </h3>
            <Button variant="outline" size="sm">
              Ver detalles
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={visitData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="visits"
                  name="Visitas"
                  stroke="#6366F1"
                  strokeWidth={2}
                />
                <Line
                  type="monotone"
                  dataKey="uniqueUsers"
                  name="Usuarios únicos"
                  stroke="#10B981"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Fuentes de tráfico */}
        <Card className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Fuentes de tráfico</h3>
            <Button variant="outline" size="sm">
              Ver detalles
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={conversionData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="value" fill="#6366F1" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </Card>
      </div>

      {/* Usuarios activos por hora */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-semibold">Usuarios activos por hora</h3>
          <Button variant="outline" size="sm">
            Ver detalles
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
        <div className="h-[300px]">
          <ResponsiveContainer width="100%" height="100%">
            <AreaChart data={timeData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="time" />
              <YAxis />
              <Tooltip />
              <Area
                type="monotone"
                dataKey="active"
                stroke="#6366F1"
                fill="#6366F1"
                fillOpacity={0.2}
              />
            </AreaChart>
          </ResponsiveContainer>
        </div>
      </Card>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\billing\page.tsx
// app/(dashboard)/dashboard/billing/page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  CreditCard,
  Download,
  CheckCircle,
  Clock,
  AlertTriangle,
  Plus,
} from "lucide-react";

const plans = [
  {
    name: "Starter",
    price: "$0",
    description: "Perfecto para empezar",
    features: [
      "Hasta 5 proyectos",
      "1GB de almacenamiento",
      "Soporte por email",
      "API limitada",
    ],
    current: false,
  },
  {
    name: "Pro",
    price: "$19",
    description: "Para equipos en crecimiento",
    features: [
      "Proyectos ilimitados",
      "10GB de almacenamiento",
      "Soporte prioritario",
      "API completa",
      "Analytics avanzado",
    ],
    current: true,
  },
  {
    name: "Enterprise",
    price: "$99",
    description: "Para grandes empresas",
    features: [
      "Todo lo de Pro",
      "50GB de almacenamiento",
      "Soporte 24/7",
      "SLA garantizado",
      "Instancia dedicada",
    ],
    current: false,
  },
];

const invoices = [
  {
    id: "INV-001",
    date: "01 Feb 2024",
    amount: "$19.00",
    status: "Pagada",
    description: "Plan Pro - Febrero 2024",
  },
  {
    id: "INV-002",
    date: "01 Ene 2024",
    amount: "$19.00",
    status: "Pagada",
    description: "Plan Pro - Enero 2024",
  },
  {
    id: "INV-003",
    date: "01 Dic 2023",
    amount: "$19.00",
    status: "Pagada",
    description: "Plan Pro - Diciembre 2023",
  },
];

const paymentMethods = [
  {
    id: "1",
    last4: "4242",
    expiry: "12/24",
    type: "Visa",
    default: true,
  },
  {
    id: "2",
    last4: "5555",
    expiry: "10/24",
    type: "Mastercard",
    default: false,
  },
];

export default function BillingPage() {
  const [selectedPlan, setSelectedPlan] = useState("Pro");

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">
          Facturación
        </h1>
        <p className="text-content-subtle mt-2">
          Administra tu suscripción y método de pago
        </p>
      </div>

      {/* Plan Actual */}
      <Card className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-semibold">Plan Actual: Pro</h2>
            <p className="text-content-subtle mt-1">
              Facturación mensual - Próximo cargo el 1 de Marzo, 2024
            </p>
          </div>
          <Button variant="outline">Cambiar Plan</Button>
        </div>
      </Card>

      {/* Planes */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {plans.map((plan) => (
          <Card
            key={plan.name}
            className={`p-6 ${
              plan.current
                ? "border-primary bg-primary/5"
                : "hover:border-primary/50"
            }`}
          >
            <div className="space-y-4">
              <div>
                <h3 className="text-xl font-semibold">{plan.name}</h3>
                <p className="text-content-subtle">{plan.description}</p>
              </div>
              <div>
                <span className="text-3xl font-bold">{plan.price}</span>
                <span className="text-content-subtle">/mes</span>
              </div>
              <ul className="space-y-2">
                {plan.features.map((feature) => (
                  <li key={feature} className="flex items-center">
                    <CheckCircle className="h-4 w-4 text-primary mr-2" />
                    <span className="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>
              <Button
                variant={plan.current ? "secondary" : "default"}
                className="w-full"
                disabled={plan.current}
              >
                {plan.current ? "Plan Actual" : "Seleccionar Plan"}
              </Button>
            </div>
          </Card>
        ))}
      </div>

      {/* Métodos de Pago */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4">Métodos de Pago</h2>
        <div className="space-y-4">
          {paymentMethods.map((method) => (
            <div
              key={method.id}
              className="flex items-center justify-between p-4 border rounded-lg"
            >
              <div className="flex items-center space-x-4">
                <CreditCard className="h-6 w-6" />
                <div>
                  <p className="font-medium">
                    {method.type} terminada en {method.last4}
                  </p>
                  <p className="text-sm text-content-subtle">
                    Expira: {method.expiry}
                  </p>
                </div>
              </div>
              <div className="flex items-center space-x-2">
                {method.default && (
                  <span className="text-sm text-primary">Por defecto</span>
                )}
                <Button variant="ghost" size="sm">
                  Editar
                </Button>
              </div>
            </div>
          ))}
          <Button variant="outline" className="mt-4">
            <Plus className="h-4 w-4 mr-2" />
            Agregar método de pago
          </Button>
        </div>
      </Card>

      {/* Historial de Facturas */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4">Historial de Facturas</h2>
        <div className="space-y-4">
          {invoices.map((invoice) => (
            <div
              key={invoice.id}
              className="flex items-center justify-between p-4 border rounded-lg"
            >
              <div>
                <p className="font-medium">{invoice.description}</p>
                <p className="text-sm text-content-subtle">{invoice.date}</p>
              </div>
              <div className="flex items-center space-x-4">
                <span className="font-medium">{invoice.amount}</span>
                <Button variant="ghost" size="sm">
                  <Download className="h-4 w-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\customers\page.tsx
// app/(dashboard)/dashboard/customers/page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { DataTable, type ColumnDef } from "@/components/ui/table";
import { FormField, FormLabel } from "@/components/ui/form";
import { Plus, Trash, Edit } from "lucide-react";

interface Customer {
  id: string;
  name: string;
  email: string;
  phone: string;
}

export default function CustomersPage() {
  const [customers, setCustomers] = useState<Customer[]>([
    {
      id: "1",
      name: "Cliente 1",
      email: "cliente1@example.com",
      phone: "123456789",
    },
    {
      id: "2",
      name: "Cliente 2",
      email: "cliente2@example.com",
      phone: "987654321",
    },
  ]);
  const [isEditing, setIsEditing] = useState(false);
  const [currentCustomer, setCurrentCustomer] = useState<Customer | null>(null);

  const handleAddCustomer = () => {
    setIsEditing(true);
    setCurrentCustomer(null);
  };

  const handleEditCustomer = (customer: Customer) => {
    setIsEditing(true);
    setCurrentCustomer(customer);
  };

  const handleDeleteCustomer = (id: string) => {
    setCustomers(customers.filter((customer) => customer.id !== id));
  };

  const handleSaveCustomer = (customer: Customer) => {
    if (currentCustomer) {
      setCustomers(customers.map((c) => (c.id === customer.id ? customer : c)));
    } else {
      setCustomers([
        ...customers,
        { ...customer, id: String(customers.length + 1) },
      ]);
    }
    setIsEditing(false);
  };

  const columns: ColumnDef<Customer>[] = [
    { accessorKey: "name", header: "Nombre" },
    { accessorKey: "email", header: "Email" },
    { accessorKey: "phone", header: "Teléfono" },
    {
      id: "actions",
      header: "Acciones",
      cell: ({ row }) => (
        <div className="flex space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleEditCustomer(row.original)}
          >
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleDeleteCustomer(row.original.id)}
          >
            <Trash className="h-4 w-4" />
          </Button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">Clientes</h1>
        <p className="text-content-subtle mt-2">
          Administra tus clientes y sus datos
        </p>
      </div>
      <Card className="p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-semibold">Lista de Clientes</h2>
          <Button onClick={handleAddCustomer}>
            <Plus className="mr-2 h-4 w-4" />
            Agregar Cliente
          </Button>
        </div>
        <DataTable columns={columns} data={customers} />
      </Card>
      {isEditing && (
        <CustomerForm
          customer={currentCustomer}
          onSave={handleSaveCustomer}
          onCancel={() => setIsEditing(false)}
        />
      )}
    </div>
  );
}

interface CustomerFormProps {
  customer: Customer | null;
  onSave: (customer: Customer) => void;
  onCancel: () => void;
}

function CustomerForm({ customer, onSave, onCancel }: CustomerFormProps) {
  const [name, setName] = useState(customer?.name || "");
  const [email, setEmail] = useState(customer?.email || "");
  const [phone, setPhone] = useState(customer?.phone || "");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave({
      id: customer?.id || "",
      name,
      email,
      phone,
    });
  };

  return (
    <Card className="p-6 mt-6">
      <h3 className="text-lg font-semibold mb-4">
        {customer ? "Editar Cliente" : "Agregar Cliente"}
      </h3>
      <form onSubmit={handleSubmit} className="space-y-4">
        <FormField>
          <FormLabel>Nombre</FormLabel>
          <Input
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </FormField>
        <FormField>
          <FormLabel>Email</FormLabel>
          <Input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </FormField>
        <FormField>
          <FormLabel>Teléfono</FormLabel>
          <Input
            type="tel"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            required
          />
        </FormField>
        <div className="flex justify-end space-x-2">
          <Button variant="outline" onClick={onCancel}>
            Cancelar
          </Button>
          <Button type="submit">Guardar</Button>
        </div>
      </form>
    </Card>
  );
}



Ruta: app\(dashboard)\dashboard\help\page.tsx
// app/(dashboard)/dashboard/help/page.tsx
"use client";
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FormInput } from "@/components/ui/form-input";
import {
  HelpCircle,
  Book,
  FileText,
  MessageCircle,
  Mail,
  Phone,
  Video,
  Search,
  ChevronRight,
  ExternalLink,
  ThumbsUp,
  ThumbsDown,
  ArrowRight,
} from "lucide-react";

const documentationCategories = [
  {
    title: "Comenzando",
    icon: Book,
    articles: [
      { id: "1", title: "Guía de inicio rápido", views: 1250 },
      { id: "2", title: "Configuración inicial", views: 980 },
      { id: "3", title: "Requisitos del sistema", views: 756 },
    ],
  },
  {
    title: "Tutoriales",
    icon: Video,
    articles: [
      { id: "4", title: "Crear tu primer proyecto", views: 2100 },
      { id: "5", title: "Gestión de usuarios", views: 1540 },
      { id: "6", title: "Configuración avanzada", views: 890 },
    ],
  },
  {
    title: "API & Integraciones",
    icon: FileText,
    articles: [
      { id: "7", title: "Documentación de la API", views: 3200 },
      { id: "8", title: "Webhooks", views: 1100 },
      { id: "9", title: "SDKs disponibles", views: 950 },
    ],
  },
];

const faqs = [
  {
    question: "¿Cómo puedo cambiar mi plan de suscripción?",
    answer:
      "Para cambiar tu plan, ve a Configuración > Facturación > Planes. Allí podrás ver todas las opciones disponibles y realizar el cambio. Los cambios se aplican al inicio del siguiente período de facturación.",
  },
  {
    question: "¿Cómo agrego más usuarios a mi equipo?",
    answer:
      "Puedes agregar nuevos usuarios desde la sección Equipo. Haz clic en 'Agregar Miembro' e ingresa su correo electrónico. Recibirán una invitación para unirse a tu equipo.",
  },
  {
    question: "¿Cuáles son los métodos de pago aceptados?",
    answer:
      "Aceptamos todas las tarjetas de crédito principales (Visa, Mastercard, American Express) y también ofrecemos pago por PayPal. Para planes Enterprise, también aceptamos transferencias bancarias.",
  },
];

interface Article {
  id: string;
  title: string;
  views: number;
}

export default function HelpPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [currentArticle, setCurrentArticle] = useState<Article | null>(null);
  const [showFeedback, setShowFeedback] = useState(false);
  const [feedbackGiven, setFeedbackGiven] = useState<
    "positive" | "negative" | null
  >(null);

  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Implementar búsqueda
    console.log("Búsqueda:", searchTerm);
  };

  const handleFeedback = (type: "positive" | "negative") => {
    setFeedbackGiven(type);
    setTimeout(() => {
      setShowFeedback(false);
      setFeedbackGiven(null);
    }, 2000);
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">
          Centro de Ayuda
        </h1>
        <p className="text-content-subtle mt-2">
          Encuentra respuestas, tutoriales y soporte
        </p>
      </div>

      {/* Búsqueda */}
      <Card className="p-8 bg-primary text-primary-foreground">
        <h2 className="text-2xl font-semibold text-center mb-2">
          ¿Cómo podemos ayudarte?
        </h2>
        <p className="text-center text-primary-foreground/90 mb-6">
          Busca en nuestra documentación y base de conocimientos
        </p>
        <form onSubmit={handleSearch} className="max-w-2xl mx-auto">
          <FormInput
            icon={Search}
            placeholder="Buscar en la documentación..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="bg-white text-content"
          />
        </form>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {/* Documentación */}
        <Card className="p-6">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
              <Book className="h-5 w-5 text-primary" />
            </div>
            <h2 className="text-xl font-semibold">Documentación</h2>
          </div>
          <div className="space-y-4">
            {documentationCategories.map((category) => (
              <div key={category.title}>
                <h3 className="font-medium mb-2 flex items-center gap-2">
                  <category.icon className="h-4 w-4 text-content-subtle" />
                  {category.title}
                </h3>
                <div className="space-y-2">
                  {category.articles.map((article) => (
                    <button
                      key={article.id}
                      onClick={() => setCurrentArticle(article)}
                      className="w-full text-left p-2 hover:bg-accent rounded-lg flex items-center justify-between group"
                    >
                      <span className="text-sm">{article.title}</span>
                      <ChevronRight className="h-4 w-4 text-content-subtle opacity-0 group-hover:opacity-100 transition-opacity" />
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </Card>

        {/* FAQs */}
        <Card className="p-6">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
              <HelpCircle className="h-5 w-5 text-primary" />
            </div>
            <h2 className="text-xl font-semibold">Preguntas Frecuentes</h2>
          </div>
          <div className="space-y-4">
            {faqs.map((faq, index) => (
              <div key={index} className="p-4 rounded-lg hover:bg-accent">
                <h3 className="font-medium mb-2">{faq.question}</h3>
                <p className="text-sm text-content-subtle">{faq.answer}</p>
              </div>
            ))}
            <Button variant="ghost" className="w-full justify-between">
              Ver todas las preguntas frecuentes
              <ArrowRight className="h-4 w-4" />
            </Button>
          </div>
        </Card>

        {/* Contacto */}
        <Card className="p-6">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
              <MessageCircle className="h-5 w-5 text-primary" />
            </div>
            <h2 className="text-xl font-semibold">Contacto Directo</h2>
          </div>
          <div className="space-y-6">
            <div className="p-4 rounded-lg border">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <Mail className="h-4 w-4" />
                Email
              </h3>
              <p className="text-sm text-content-subtle mb-3">
                Respuesta en 24-48 horas hábiles
              </p>
              <Button variant="outline" className="w-full">
                Enviar email
              </Button>
            </div>

            <div className="p-4 rounded-lg border">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <MessageCircle className="h-4 w-4" />
                Chat en vivo
              </h3>
              <p className="text-sm text-content-subtle mb-3">
                Disponible Lun-Vie, 9am-6pm
              </p>
              <Button variant="outline" className="w-full">
                Iniciar chat
              </Button>
            </div>

            <div className="p-4 rounded-lg border">
              <h3 className="font-medium mb-2 flex items-center gap-2">
                <Phone className="h-4 w-4" />
                Llamada
              </h3>
              <p className="text-sm text-content-subtle mb-3">
                Soporte telefónico premium
              </p>
              <Button variant="outline" className="w-full">
                Programar llamada
              </Button>
            </div>
          </div>
        </Card>
      </div>

      {/* Enlaces útiles */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Button
          variant="outline"
          className="h-auto p-4 flex flex-col items-center gap-2"
        >
          <Book className="h-6 w-6" />
          <span className="font-medium">Guías y Tutoriales</span>
          <span className="text-sm text-content-subtle">
            Aprende con ejemplos prácticos
          </span>
        </Button>

        <Button
          variant="outline"
          className="h-auto p-4 flex flex-col items-center gap-2"
        >
          <FileText className="h-6 w-6" />
          <span className="font-medium">API Reference</span>
          <span className="text-sm text-content-subtle">
            Documentación técnica detallada
          </span>
        </Button>

        <Button
          variant="outline"
          className="h-auto p-4 flex flex-col items-center gap-2"
        >
          <Video className="h-6 w-6" />
          <span className="font-medium">Video Tutoriales</span>
          <span className="text-sm text-content-subtle">
            Aprende paso a paso
          </span>
        </Button>
      </div>

      {/* Modal de artículo */}
      {currentArticle && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center">
          <Card className="w-full max-w-2xl m-4 p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold">{currentArticle.title}</h2>
              <Button variant="ghost" onClick={() => setCurrentArticle(null)}>
                <X className="h-4 w-4" />
              </Button>
            </div>

            <div className="prose prose-sm max-w-none">
              {/* Contenido del artículo */}
              <p>Contenido del artículo...</p>
            </div>

            {!showFeedback ? (
              <div className="mt-6 pt-6 border-t text-center">
                <p className="text-sm text-content-subtle mb-3">
                  ¿Te fue útil este artículo?
                </p>
                <div className="flex items-center justify-center gap-4">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setShowFeedback(true);
                      handleFeedback("positive");
                    }}
                  >
                    <ThumbsUp className="h-4 w-4 mr-2" />
                    Sí
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      setShowFeedback(true);
                      handleFeedback("negative");
                    }}
                  >
                    <ThumbsDown className="h-4 w-4 mr-2" />
                    No
                  </Button>
                </div>
              </div>
            ) : (
              <div className="mt-6 pt-6 border-t text-center">
                <p className="text-sm">
                  {feedbackGiven === "positive"
                    ? "¡Gracias por tu feedback positivo!"
                    : "Gracias por tu feedback. Trabajaremos en mejorar este artículo."}
                </p>
              </div>
            )}
          </Card>
        </div>
      )}
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\invite\page.tsx
// app/(dashboard)/dashboard/invite/page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { DataTable, type ColumnDef } from "@/components/ui/table";
import { FormField, FormLabel } from "@/components/ui/form";
import { Mail, X, Check, Clock, AlertCircle } from "lucide-react";

interface PendingInvite {
  email: string;
  role: string;
  status: string;
  date: string;
}

interface TeamMember {
  name: string;
  email: string;
  role: string;
  joinedAt: string;
}

const pendingInvites = [
  {
    email: "juan@example.com",
    role: "Editor",
    status: "Pendiente",
    date: "Hace 2 días",
  },
  {
    email: "maria@example.com",
    role: "Viewer",
    status: "Expirada",
    date: "Hace 7 días",
  },
];

const teamMembers = [
  {
    name: "Carlos Rodriguez",
    email: "carlos@example.com",
    role: "Admin",
    joinedAt: "Hace 3 meses",
  },
  {
    name: "Ana Martinez",
    email: "ana@example.com",
    role: "Editor",
    joinedAt: "Hace 1 mes",
  },
];

export default function InvitePage() {
  const [isInviting, setIsInviting] = useState(false);
  const [inviteEmail, setInviteEmail] = useState("");
  const [inviteRole, setInviteRole] = useState("editor");
  const [showSuccess, setShowSuccess] = useState(false);

  const handleInvite = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsInviting(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      setShowSuccess(true);
      setInviteEmail("");
      setTimeout(() => setShowSuccess(false), 3000);
    } catch (error) {
      console.error("Error al enviar la invitación:", error);
    } finally {
      setIsInviting(false);
    }
  };

  const handleCancelInvite = (email: string) => {
    console.log("Cancelar invitación:", email);
  };

  const handleRemoveMember = (email: string) => {
    console.log("Eliminar miembro:", email);
  };

  const pendingInvitesColumns: ColumnDef<PendingInvite>[] = [
    { accessorKey: "email", header: "Email" },
    { accessorKey: "role", header: "Rol" },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }) => {
        const status = row.getValue("status") as string;
        return (
          <div className="flex items-center">
            {status === "Pendiente" ? (
              <Clock className="h-4 w-4 text-yellow-500 mr-2" />
            ) : (
              <AlertCircle className="h-4 w-4 text-red-500 mr-2" />
            )}
            {status}
          </div>
        );
      },
    },
    { accessorKey: "date", header: "Fecha" },
    {
      id: "actions",
      header: "Acciones",
      cell: ({ row }) => (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => handleCancelInvite(row.original.email)}
        >
          <X className="h-4 w-4" />
        </Button>
      ),
    },
  ];

  const teamMembersColumns: ColumnDef<TeamMember>[] = [
    {
      accessorKey: "name",
      header: "Nombre",
      cell: ({ row }) => (
        <span className="font-medium">{row.getValue("name")}</span>
      ),
    },
    { accessorKey: "email", header: "Email" },
    { accessorKey: "role", header: "Rol" },
    { accessorKey: "joinedAt", header: "Se unió" },
    {
      id: "actions",
      header: "Acciones",
      cell: ({ row }) => (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => handleRemoveMember(row.original.email)}
        >
          <X className="h-4 w-4" />
        </Button>
      ),
    },
  ];

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">
          Invitar al Equipo
        </h1>
        <p className="text-content-subtle mt-2">
          Invita a nuevos miembros a colaborar en tu equipo
        </p>
      </div>

      {/* Formulario de invitación */}
      <Card className="p-6">
        <form onSubmit={handleInvite} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel>Correo electrónico</FormLabel>
              <Input
                type="email"
                placeholder="correo@ejemplo.com"
                value={inviteEmail}
                onChange={(e) => setInviteEmail(e.target.value)}
                required
              />
            </FormField>
            <FormField>
              <FormLabel>Rol</FormLabel>
              <Select value={inviteRole} onValueChange={setInviteRole}>
                <SelectTrigger>
                  <SelectValue placeholder="Seleccionar rol" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="admin">Administrador</SelectItem>
                  <SelectItem value="editor">Editor</SelectItem>
                  <SelectItem value="viewer">Visualizador</SelectItem>
                </SelectContent>
              </Select>
            </FormField>
          </div>

          <div className="flex items-center justify-between">
            <p className="text-sm text-content-subtle">
              Se enviará un email de invitación con instrucciones para unirse
            </p>
            <Button type="submit" disabled={isInviting}>
              {isInviting ? (
                <>
                  <Clock className="mr-2 h-4 w-4 animate-spin" />
                  Enviando...
                </>
              ) : (
                <>
                  <Mail className="mr-2 h-4 w-4" />
                  Enviar Invitación
                </>
              )}
            </Button>
          </div>

          {showSuccess && (
            <div className="bg-green-50 text-green-600 p-3 rounded-lg flex items-center">
              <Check className="h-4 w-4 mr-2" />
              Invitación enviada correctamente
            </div>
          )}
        </form>
      </Card>

      {/* Invitaciones pendientes */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4">Invitaciones Pendientes</h2>
        <DataTable
          columns={pendingInvitesColumns}
          data={pendingInvites}
          pagination={false}
        />
      </Card>

      {/* Miembros del equipo */}
      <Card className="p-6">
        <h2 className="text-xl font-semibold mb-4">Miembros del Equipo</h2>
        <DataTable
          columns={teamMembersColumns}
          data={teamMembers}
          pagination={false}
        />
      </Card>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\messages\page.tsx
"use client";

import { useState, useRef, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { FormInput } from "@/components/ui/form-input";
import {
  Search,
  Send,
  Plus,
  Phone,
  Video,
  MoreVertical,
  Image as ImageIcon,
  Paperclip,
  Smile,
  User,
  Circle,
} from "lucide-react";
import { cn } from "@/lib/utils";

interface Message {
  id: string;
  content: string;
  timestamp: string;
  sender: string;
  isMe: boolean;
  status: "sent" | "delivered" | "read";
}

interface Conversation {
  id: string;
  name: string;
  avatar?: string;
  lastMessage: string;
  timestamp: string;
  unread: number;
  online: boolean;
  isTyping?: boolean;
}

export default function MessagesPage() {
  const [conversations, setConversations] = useState<Conversation[]>([
    {
      id: "1",
      name: "María García",
      lastMessage: "¿Podemos revisar los cambios?",
      timestamp: "10:30",
      unread: 2,
      online: true,
    },
    {
      id: "2",
      name: "Juan Pérez",
      lastMessage: "Gracias por la actualización",
      timestamp: "09:45",
      unread: 0,
      online: false,
    },
    {
      id: "3",
      name: "Ana Martínez",
      lastMessage: "El documento está listo",
      timestamp: "Ayer",
      unread: 0,
      online: true,
      isTyping: true,
    },
  ]);

  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "Hola María, ¿cómo vas con el proyecto?",
      timestamp: "10:15",
      sender: "me",
      isMe: true,
      status: "read",
    },
    {
      id: "2",
      content: "¡Hola! Todo va bien, estoy terminando los últimos detalles",
      timestamp: "10:20",
      sender: "María García",
      isMe: false,
      status: "read",
    },
    {
      id: "3",
      content: "¿Podemos revisar los cambios?",
      timestamp: "10:30",
      sender: "María García",
      isMe: false,
      status: "read",
    },
  ]);

  const [selectedConversation, setSelectedConversation] = useState<string>("1");
  const [newMessage, setNewMessage] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const messageEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    messageEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const handleSendMessage = () => {
    if (!newMessage.trim()) return;

    const message: Message = {
      id: Date.now().toString(),
      content: newMessage,
      timestamp: new Date().toLocaleTimeString([], {
        hour: "2-digit",
        minute: "2-digit",
      }),
      sender: "me",
      isMe: true,
      status: "sent",
    };

    setMessages([...messages, message]);
    setNewMessage("");

    // Simular respuesta después de 2 segundos
    setTimeout(() => {
      const response: Message = {
        id: (Date.now() + 1).toString(),
        content: "Claro, ¿te parece si hacemos una llamada?",
        timestamp: new Date().toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit",
        }),
        sender: "María García",
        isMe: false,
        status: "sent",
      };
      setMessages((prev) => [...prev, response]);
    }, 2000);
  };

  const filteredConversations = conversations.filter((conv) =>
    conv.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">Mensajes</h1>
        <p className="text-content-subtle mt-2">
          Gestiona tus conversaciones y mensajes
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-[350px_1fr] gap-6 h-[calc(100vh-250px)]">
        {/* Lista de conversaciones */}
        <Card className="flex flex-col h-full">
          <div className="p-4 border-b">
            <div className="flex items-center gap-2">
              <Input
                type="search"
                placeholder="Buscar conversación..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="flex-1"
                prefix={<Search className="h-4 w-4 text-content-subtle" />}
              />
              <Button size="icon" variant="ghost">
                <Plus className="h-5 w-5" />
              </Button>
            </div>
          </div>

          <div className="flex-1 overflow-y-auto">
            {filteredConversations.map((conv) => (
              <button
                key={conv.id}
                onClick={() => setSelectedConversation(conv.id)}
                className={cn(
                  "w-full p-4 flex items-start gap-3 hover:bg-accent/50 transition-colors",
                  selectedConversation === conv.id && "bg-accent"
                )}
              >
                <div className="relative">
                  <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
                    <User className="h-5 w-5 text-primary" />
                  </div>
                  {conv.online && (
                    <Circle className="h-3 w-3 text-success absolute bottom-0 right-0 fill-current" />
                  )}
                </div>

                <div className="flex-1 text-left">
                  <div className="flex items-center justify-between">
                    <span className="font-medium">{conv.name}</span>
                    <span className="text-xs text-content-subtle">
                      {conv.timestamp}
                    </span>
                  </div>
                  <div className="flex items-center justify-between mt-1">
                    <span className="text-sm text-content-subtle truncate max-w-[180px]">
                      {conv.isTyping ? (
                        <span className="text-primary">Escribiendo...</span>
                      ) : (
                        conv.lastMessage
                      )}
                    </span>
                    {conv.unread > 0 && (
                      <span className="bg-primary text-primary-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {conv.unread}
                      </span>
                    )}
                  </div>
                </div>
              </button>
            ))}
          </div>
        </Card>

        {/* Área de chat */}
        <Card className="flex flex-col h-full">
          {/* Header del chat */}
          <div className="p-4 border-b flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="relative">
                <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
                  <User className="h-5 w-5 text-primary" />
                </div>
                <Circle className="h-3 w-3 text-success absolute bottom-0 right-0 fill-current" />
              </div>
              <div>
                <h3 className="font-medium">María García</h3>
                <p className="text-sm text-content-subtle">En línea</p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon">
                <Phone className="h-5 w-5" />
              </Button>
              <Button variant="ghost" size="icon">
                <Video className="h-5 w-5" />
              </Button>
              <Button variant="ghost" size="icon">
                <MoreVertical className="h-5 w-5" />
              </Button>
            </div>
          </div>

          {/* Mensajes */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  "flex",
                  message.isMe ? "justify-end" : "justify-start"
                )}
              >
                <div
                  className={cn(
                    "max-w-[70%] rounded-lg p-3",
                    message.isMe
                      ? "bg-primary text-primary-foreground"
                      : "bg-accent"
                  )}
                >
                  <p>{message.content}</p>
                  <div
                    className={cn(
                      "text-xs mt-1 flex items-center gap-1",
                      message.isMe
                        ? "text-primary-foreground/80"
                        : "text-content-subtle"
                    )}
                  >
                    {message.timestamp}
                    {message.isMe && (
                      <span className="text-primary-foreground/80">
                        {message.status === "read" ? "✓✓" : "✓"}
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messageEndRef} />
          </div>

          {/* Input de mensaje */}
          <div className="p-4 border-t">
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon">
                <Plus className="h-5 w-5" />
              </Button>
              <Button variant="ghost" size="icon">
                <ImageIcon className="h-5 w-5" />
              </Button>
              <Button variant="ghost" size="icon">
                <Paperclip className="h-5 w-5" />
              </Button>

              <Input
                placeholder="Escribe un mensaje..."
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                className="flex-1"
              />

              <Button variant="ghost" size="icon">
                <Smile className="h-5 w-5" />
              </Button>
              <Button
                onClick={handleSendMessage}
                disabled={!newMessage.trim()}
                variant={newMessage.trim() ? "default" : "ghost"}
              >
                <Send className="h-5 w-5" />
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\page.tsx
// app/(dashboard)/dashboard/page.tsx
"use client";

import { useState } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";
import { Card } from "@/components/ui/card";
import {
  EyeIcon,
  TrendingUpIcon,
  UsersIcon,
  ArrowUpIcon,
  ArrowDownIcon,
  FilterIcon,
  DownloadIcon,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { DateRangePicker } from "@/components/dashboard/date-range-picker";
import { StatsCard } from "@/components/dashboard/stats-card";
import { IntegrationsList } from "@/components/dashboard/integrations-list";
import { SalesDistribution } from "@/components/dashboard/sales-distribution";

const pageViewsData = [
  { mes: "Oct", valor: 2988.2 },
  { mes: "Nov", valor: 1765.09 },
  { mes: "Dic", valor: 4005.65 },
];

const weeklyData = [
  { day: "Dom", value: 1200 },
  { day: "Lun", value: 1800 },
  { day: "Mar", value: 3874 },
  { day: "Mie", value: 2200 },
  { day: "Jue", value: 2800 },
  { day: "Vie", value: 2400 },
  { day: "Sab", value: 2100 },
];

export default function DashboardPage() {
  const [dateRange, setDateRange] = useState({
    start: new Date(),
    end: new Date(),
  });

  const stats = [
    {
      title: "Vistas de página",
      value: "12,450",
      change: "+15.8%",
      trend: "up",
      icon: EyeIcon,
    },
    {
      title: "Ingresos totales",
      value: "$363.95",
      change: "-34.0%",
      trend: "down",
      icon: TrendingUpIcon,
    },
    {
      title: "Tasa de rebote",
      value: "86.5%",
      change: "+24.2%",
      trend: "up",
      icon: UsersIcon,
    },
  ];

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-sm text-gray-500">Oct 18 - Nov 18</p>
        </div>

        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <DateRangePicker
            value={dateRange}
            onChange={setDateRange}
            className="w-full sm:w-auto"
          />
          <Button variant="outline" size="icon" className="hidden sm:flex">
            <FilterIcon className="h-4 w-4" />
          </Button>
          <Button variant="outline" size="icon" className="hidden sm:flex">
            <DownloadIcon className="h-4 w-4" />
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {stats.map((stat, index) => (
          <StatsCard
            key={index}
            title={stat.title}
            value={stat.value}
            change={stat.change}
            trend={stat.trend as "up" | "down"}
            icon={stat.icon}
          />
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Resumen de ventas</h3>
            <Button variant="outline" size="sm">
              <FilterIcon className="h-4 w-4 mr-2" />
              Filtrar
            </Button>
          </div>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={pageViewsData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="mes" />
                <YAxis />
                <Tooltip />
                <Line
                  type="monotone"
                  dataKey="valor"
                  stroke="#6366F1"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </Card>

        <Card className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold">Suscriptores totales</h3>
            <select className="text-sm border rounded-md px-2 py-1">
              <option>Semanal</option>
              <option>Mensual</option>
              <option>Anual</option>
            </select>
          </div>
          <div className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={weeklyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="day" />
                <YAxis />
                <Tooltip />
                <Line
                  type="monotone"
                  dataKey="value"
                  stroke="#8B5CF6"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <SalesDistribution />
        <IntegrationsList />
      </div>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\products\page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FormInput } from "@/components/ui/form-input";
import { FormTextarea } from "@/components/ui/form-textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { DataTable } from "@/components/ui/table";
import {
  Plus,
  Search,
  Filter,
  MoreVertical,
  Edit,
  Trash,
  Package,
  DollarSign,
  Boxes,
  Tags,
  AlertCircle,
} from "lucide-react";

interface Product {
  id: string;
  name: string;
  description: string;
  category: string;
  price: number;
  stock: number;
  status: "active" | "draft" | "archived";
  sku: string;
  createdAt: string;
}

export default function ProductsPage() {
  const [products, setProducts] = useState<Product[]>([
    {
      id: "1",
      name: "Producto Premium",
      description: "Descripción detallada del producto premium",
      category: "Premium",
      price: 199.99,
      stock: 50,
      status: "active",
      sku: "PRO-001",
      createdAt: "2024-02-20",
    },
    {
      id: "2",
      name: "Producto Básico",
      description: "Descripción del producto básico",
      category: "Básico",
      price: 49.99,
      stock: 100,
      status: "active",
      sku: "BAS-001",
      createdAt: "2024-02-19",
    },
  ]);

  const [isCreating, setIsCreating] = useState(false);
  const [isEditing, setIsEditing] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  const [sortBy, setSortBy] = useState<string>("newest");

  const [formData, setFormData] = useState({
    name: "",
    description: "",
    category: "",
    price: "",
    stock: "",
    sku: "",
    status: "active" as const,
  });

  const categories = ["Premium", "Básico", "Especial", "Limitado"];
  const statusOptions = [
    { value: "all", label: "Todos los estados" },
    { value: "active", label: "Activo" },
    { value: "draft", label: "Borrador" },
    { value: "archived", label: "Archivado" },
  ];

  const sortOptions = [
    { value: "newest", label: "Más recientes" },
    { value: "oldest", label: "Más antiguos" },
    { value: "name_asc", label: "Nombre A-Z" },
    { value: "name_desc", label: "Nombre Z-A" },
    { value: "price_asc", label: "Precio menor a mayor" },
    { value: "price_desc", label: "Precio mayor a menor" },
  ];

  const filteredProducts = products
    .filter(
      (product) =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.sku.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((product) =>
      selectedStatus === "all" ? true : product.status === selectedStatus
    )
    .sort((a, b) => {
      switch (sortBy) {
        case "newest":
          return (
            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
          );
        case "oldest":
          return (
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
          );
        case "name_asc":
          return a.name.localeCompare(b.name);
        case "name_desc":
          return b.name.localeCompare(a.name);
        case "price_asc":
          return a.price - b.price;
        case "price_desc":
          return b.price - a.price;
        default:
          return 0;
      }
    });

  const handleSave = () => {
    const newProduct = {
      id: isEditing || Date.now().toString(),
      ...formData,
      price: parseFloat(formData.price),
      stock: parseInt(formData.stock),
      createdAt: new Date().toISOString().split("T")[0],
    };

    if (isEditing) {
      setProducts(products.map((p) => (p.id === isEditing ? newProduct : p)));
    } else {
      setProducts([...products, newProduct]);
    }

    setIsCreating(false);
    setIsEditing(null);
    setFormData({
      name: "",
      description: "",
      category: "",
      price: "",
      stock: "",
      sku: "",
      status: "active",
    });
  };

  const handleEdit = (product: Product) => {
    setIsEditing(product.id);
    setFormData({
      name: product.name,
      description: product.description,
      category: product.category,
      price: product.price.toString(),
      stock: product.stock.toString(),
      sku: product.sku,
      status: product.status,
    });
  };

  const handleDelete = (id: string) => {
    if (confirm("¿Estás seguro de que deseas eliminar este producto?")) {
      setProducts(products.filter((p) => p.id !== id));
    }
  };

  const columns = [
    {
      id: "product",
      header: "Producto",
      cell: ({ row }) => (
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 rounded bg-primary/10 flex items-center justify-center">
            <Package className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="font-medium">{row.original.name}</p>
            <p className="text-sm text-content-subtle">
              SKU: {row.original.sku}
            </p>
          </div>
        </div>
      ),
    },
    {
      id: "price",
      header: "Precio",
      cell: ({ row }) => (
        <div className="flex items-center gap-2">
          <DollarSign className="h-4 w-4 text-content-subtle" />
          <span className="font-medium">{row.original.price.toFixed(2)}</span>
        </div>
      ),
    },
    {
      id: "stock",
      header: "Stock",
      cell: ({ row }) => (
        <div className="flex items-center gap-2">
          <Boxes className="h-4 w-4 text-content-subtle" />
          <span>{row.original.stock} unidades</span>
        </div>
      ),
    },
    {
      id: "category",
      header: "Categoría",
      cell: ({ row }) => (
        <div className="flex items-center gap-2">
          <Tags className="h-4 w-4 text-content-subtle" />
          <span>{row.original.category}</span>
        </div>
      ),
    },
    {
      id: "status",
      header: "Estado",
      cell: ({ row }) => {
        const statusStyles = {
          active: "bg-success/10 text-success",
          draft: "bg-warning/10 text-warning",
          archived: "bg-error/10 text-error",
        };

        return (
          <span
            className={`px-2 py-1 rounded-full text-xs font-medium ${
              statusStyles[row.original.status]
            }`}
          >
            {row.original.status === "active"
              ? "Activo"
              : row.original.status === "draft"
              ? "Borrador"
              : "Archivado"}
          </span>
        );
      },
    },
    {
      id: "actions",
      header: "",
      cell: ({ row }) => (
        <div className="flex items-center justify-end gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleEdit(row.original)}
          >
            <Edit className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleDelete(row.original.id)}
          >
            <Trash className="h-4 w-4" />
          </Button>
        </div>
      ),
    },
  ];

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">Productos</h1>
        <p className="text-content-subtle mt-2">
          Gestiona tu catálogo de productos
        </p>
      </div>

      {/* Filtros y acciones */}
      <Card className="p-6">
        <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
          <div className="flex flex-1 gap-4">
            <FormInput
              icon={Search}
              placeholder="Buscar por nombre o SKU..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-xs"
            />
            <Select value={selectedStatus} onValueChange={setSelectedStatus}>
              <SelectTrigger className="w-[180px]">
                <Filter className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Filtrar por estado" />
              </SelectTrigger>
              <SelectContent>
                {statusOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="w-[180px]">
                <MoreVertical className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Ordenar por" />
              </SelectTrigger>
              <SelectContent>
                {sortOptions.map((option) => (
                  <SelectItem key={option.value} value={option.value}>
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <Button onClick={() => setIsCreating(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Nuevo Producto
          </Button>
        </div>
      </Card>

      {/* Lista de productos */}
      <Card className="p-6">
        {filteredProducts.length > 0 ? (
          <DataTable columns={columns} data={filteredProducts} />
        ) : (
          <div className="text-center py-12">
            <AlertCircle className="h-12 w-12 text-content-subtle mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">
              No se encontraron productos
            </h3>
            <p className="text-content-subtle">
              Intenta ajustar los filtros o crea un nuevo producto
            </p>
          </div>
        )}
      </Card>

      {/* Modal de creación/edición */}
      {(isCreating || isEditing) && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center">
          <Card className="w-full max-w-2xl p-6 m-4">
            <h2 className="text-xl font-semibold mb-6">
              {isEditing ? "Editar Producto" : "Nuevo Producto"}
            </h2>
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormInput
                  label="Nombre del producto"
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                  required
                />
                <FormInput
                  label="SKU"
                  value={formData.sku}
                  onChange={(e) =>
                    setFormData({ ...formData, sku: e.target.value })
                  }
                  required
                />
                <FormInput
                  label="Precio"
                  type="number"
                  value={formData.price}
                  onChange={(e) =>
                    setFormData({ ...formData, price: e.target.value })
                  }
                  required
                />
                <FormInput
                  label="Stock"
                  type="number"
                  value={formData.stock}
                  onChange={(e) =>
                    setFormData({ ...formData, stock: e.target.value })
                  }
                  required
                />
                <div className="md:col-span-2">
                  <FormTextarea
                    label="Descripción"
                    value={formData.description}
                    onChange={(e) =>
                      setFormData({ ...formData, description: e.target.value })
                    }
                  />
                </div>
                <Select
                  value={formData.category}
                  onValueChange={(value) =>
                    setFormData({ ...formData, category: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccionar categoría" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem key={category} value={category}>
                        {category}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <Select
                  value={formData.status}
                  onValueChange={(value: "active" | "draft" | "archived") =>
                    setFormData({ ...formData, status: value })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccionar estado" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Activo</SelectItem>
                    <SelectItem value="draft">Borrador</SelectItem>
                    <SelectItem value="archived">Archivado</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsCreating(false);
                    setIsEditing(null);
                  }}
                >
                  Cancelar
                </Button>
                <Button onClick={handleSave}>
                  {isEditing ? "Guardar cambios" : "Crear producto"}
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\profile\page.tsx
"use client"
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { FormField, FormLabel } from "@/components/ui/form";
import { UserAvatar } from "@/components/dashboard/user-avatar";
import {
  User,
  Mail,
  Phone,
  MapPin,
  Building,
  Globe,
  Twitter,
  Github,
  Linkedin,
  Save,
} from "lucide-react";

export default function ProfilePage() {
  const [isUpdating, setIsUpdating] = useState(false);
  const [profile, setProfile] = useState({
    name: "Usuario de Prueba",
    email: "test@example.com",
    phone: "+1234567890",
    location: "Ciudad de México, México",
    company: "Tech Company",
    website: "https://example.com",
    bio: "Senior Software Developer con más de 5 años de experiencia en desarrollo web y aplicaciones móviles. Apasionado por las nuevas tecnologías y el aprendizaje continuo.",
    social: {
      twitter: "@usuario",
      github: "usuario",
      linkedin: "usuario",
    },
  });

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsUpdating(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      // Aquí iría la llamada al backend
      console.log("Perfil actualizado:", profile);
    } catch (error) {
      console.error("Error al actualizar el perfil:", error);
    } finally {
      setIsUpdating(false);
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">Mi Perfil</h1>
        <p className="text-content-subtle mt-2">
          Administra tu información personal y preferencias
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Información Personal */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6">Información Personal</h2>

          <div className="flex items-center gap-6 mb-6 pb-6 border-b">
            <UserAvatar />
            <div>
              <h3 className="font-medium text-content">Foto de Perfil</h3>
              <p className="text-sm text-content-subtle mt-1">
                Esta foto se mostrará en tu perfil y notificaciones
              </p>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <User className="h-4 w-4" />
                  Nombre completo
                </div>
              </FormLabel>
              <Input
                value={profile.name}
                onChange={(e) =>
                  setProfile({ ...profile, name: e.target.value })
                }
              />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Mail className="h-4 w-4" />
                  Correo electrónico
                </div>
              </FormLabel>
              <Input type="email" value={profile.email} disabled />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Phone className="h-4 w-4" />
                  Teléfono
                </div>
              </FormLabel>
              <Input
                type="tel"
                value={profile.phone}
                onChange={(e) =>
                  setProfile({ ...profile, phone: e.target.value })
                }
              />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <MapPin className="h-4 w-4" />
                  Ubicación
                </div>
              </FormLabel>
              <Input
                value={profile.location}
                onChange={(e) =>
                  setProfile({ ...profile, location: e.target.value })
                }
              />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Building className="h-4 w-4" />
                  Empresa
                </div>
              </FormLabel>
              <Input
                value={profile.company}
                onChange={(e) =>
                  setProfile({ ...profile, company: e.target.value })
                }
              />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Globe className="h-4 w-4" />
                  Sitio web
                </div>
              </FormLabel>
              <Input
                type="url"
                value={profile.website}
                onChange={(e) =>
                  setProfile({ ...profile, website: e.target.value })
                }
              />
            </FormField>
          </div>

          <FormField className="mt-6">
            <FormLabel>Biografía</FormLabel>
            <textarea
              className="min-h-[100px] w-full rounded-md border border-border bg-background px-3 py-2 text-sm"
              value={profile.bio}
              onChange={(e) => setProfile({ ...profile, bio: e.target.value })}
            />
          </FormField>
        </Card>

        {/* Redes Sociales */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6">Redes Sociales</h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Twitter className="h-4 w-4" />
                  Twitter
                </div>
              </FormLabel>
              <Input
                value={profile.social.twitter}
                onChange={(e) =>
                  setProfile({
                    ...profile,
                    social: { ...profile.social, twitter: e.target.value },
                  })
                }
              />
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Github className="h-4 w-4" />
                  GitHub
                </div>
              </FormLabel>
              <Input
                value={profile.social.github}
                onChange={(e) =>
                  setProfile({
                    ...profile,
                    social: { ...profile.social, github: e.target.value },
                  })
                }
              />
            </FormField>

            <FormField className="md:col-span-2">
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Linkedin className="h-4 w-4" />
                  LinkedIn
                </div>
              </FormLabel>
              <Input
                value={profile.social.linkedin}
                onChange={(e) =>
                  setProfile({
                    ...profile,
                    social: { ...profile.social, linkedin: e.target.value },
                  })
                }
              />
            </FormField>
          </div>
        </Card>

        <div className="flex justify-end">
          <Button type="submit" disabled={isUpdating} size="lg">
            {isUpdating ? (
              <>Guardando...</>
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Guardar cambios
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\settings\page.tsx
"use client"

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FormInput } from "@/components/ui/form-input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { FormSwitch } from "@/components/ui/form-switch";
import { FormField, FormLabel } from "@/components/ui/form";
import {
  Bell,
  Moon,
  Globe,
  Mail,
  MessageSquare,
  Clock,
  ShieldCheck,
  Lock,
  Key,
  Smartphone,
  Save,
} from "lucide-react";

export default function SettingsPage() {
  const [isUpdating, setIsUpdating] = useState(false);
  const [settings, setSettings] = useState({
    notifications: {
      email: true,
      push: true,
      desktop: false,
      marketing: true,
      security: true,
      updates: true,
    },
    theme: "light",
    language: "es",
    timezone: "America/Mexico_City",
    privacy: {
      profileVisibility: "public",
      emailVisibility: "contacts",
      activityVisibility: "private",
      twoFactorEnabled: true,
    },
    sessions: [
      {
        device: "Chrome en Windows",
        location: "Ciudad de México, México",
        lastAccess: "Hace 2 minutos",
        current: true,
      },
      {
        device: "Mobile App en iPhone",
        location: "Ciudad de México, México",
        lastAccess: "Hace 1 día",
        current: false,
      },
    ],
  });

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsUpdating(true);
    try {
      await new Promise((resolve) => setTimeout(resolve, 1000));
      console.log("Configuración actualizada:", settings);
    } catch (error) {
      console.error("Error al actualizar la configuración:", error);
    } finally {
      setIsUpdating(false);
    }
  }

  const handleNotificationChange = (
    key: keyof typeof settings.notifications,
    value: boolean
  ) => {
    setSettings({
      ...settings,
      notifications: {
        ...settings.notifications,
        [key]: value,
      },
    });
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">
          Configuración
        </h1>
        <p className="text-content-subtle mt-2">
          Administra las preferencias de tu cuenta y personaliza tu experiencia
        </p>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* Apariencia y Localización */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6">
            Apariencia y Localización
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Moon className="h-4 w-4" />
                  Tema
                </div>
              </FormLabel>
              <Select
                value={settings.theme}
                onValueChange={(value) =>
                  setSettings({ ...settings, theme: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecciona un tema" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="light">Claro</SelectItem>
                  <SelectItem value="dark">Oscuro</SelectItem>
                  <SelectItem value="system">Sistema</SelectItem>
                </SelectContent>
              </Select>
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Globe className="h-4 w-4" />
                  Idioma
                </div>
              </FormLabel>
              <Select
                value={settings.language}
                onValueChange={(value) =>
                  setSettings({ ...settings, language: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecciona un idioma" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="es">Español</SelectItem>
                  <SelectItem value="en">English</SelectItem>
                  <SelectItem value="pt">Português</SelectItem>
                  <SelectItem value="fr">Français</SelectItem>
                </SelectContent>
              </Select>
            </FormField>

            <FormField>
              <FormLabel>
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4" />
                  Zona horaria
                </div>
              </FormLabel>
              <Select
                value={settings.timezone}
                onValueChange={(value) =>
                  setSettings({ ...settings, timezone: value })
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Selecciona zona horaria" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="America/Mexico_City">
                    Ciudad de México (GMT-6)
                  </SelectItem>
                  <SelectItem value="America/New_York">
                    Nueva York (GMT-5)
                  </SelectItem>
                  <SelectItem value="Europe/Madrid">Madrid (GMT+1)</SelectItem>
                  <SelectItem value="Asia/Tokyo">Tokyo (GMT+9)</SelectItem>
                </SelectContent>
              </Select>
            </FormField>
          </div>
        </Card>

        {/* Notificaciones */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6">Notificaciones</h2>

          <div className="space-y-4">
            <div className="flex items-center justify-between py-3">
              <div className="flex items-center gap-3">
                <Mail className="h-5 w-5 text-content-subtle" />
                <div>
                  <p className="font-medium">Notificaciones por correo</p>
                  <p className="text-sm text-content-subtle">
                    Recibe actualizaciones importantes en tu correo
                  </p>
                </div>
              </div>
              <FormSwitch
                checked={settings.notifications.email}
                onCheckedChange={(checked) =>
                  handleNotificationChange("email", checked)
                }
              />
            </div>

            <div className="flex items-center justify-between py-3">
              <div className="flex items-center gap-3">
                <Smartphone className="h-5 w-5 text-content-subtle" />
                <div>
                  <p className="font-medium">Notificaciones push</p>
                  <p className="text-sm text-content-subtle">
                    Recibe notificaciones en tu dispositivo
                  </p>
                </div>
              </div>
              <FormSwitch
                checked={settings.notifications.push}
                onCheckedChange={(checked) =>
                  handleNotificationChange("push", checked)
                }
              />
            </div>

            <div className="flex items-center justify-between py-3">
              <div className="flex items-center gap-3">
                <MessageSquare className="h-5 w-5 text-content-subtle" />
                <div>
                  <p className="font-medium">Notificaciones de marketing</p>
                  <p className="text-sm text-content-subtle">
                    Recibe noticias y ofertas especiales
                  </p>
                </div>
              </div>
              <FormSwitch
                checked={settings.notifications.marketing}
                onCheckedChange={(checked) =>
                  handleNotificationChange("marketing", checked)
                }
              />
            </div>

            <div className="flex items-center justify-between py-3">
              <div className="flex items-center gap-3">
                <ShieldCheck className="h-5 w-5 text-content-subtle" />
                <div>
                  <p className="font-medium">Alertas de seguridad</p>
                  <p className="text-sm text-content-subtle">
                    Recibe alertas sobre actividad sospechosa
                  </p>
                </div>
              </div>
              <FormSwitch
                checked={settings.notifications.security}
                onCheckedChange={(checked) =>
                  handleNotificationChange("security", checked)
                }
              />
            </div>
          </div>
        </Card>

        {/* Privacidad y Seguridad */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-6">Privacidad y Seguridad</h2>

          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <FormField>
                <FormLabel>
                  <div className="flex items-center gap-2">
                    <Lock className="h-4 w-4" />
                    Visibilidad del perfil
                  </div>
                </FormLabel>
                <Select
                  value={settings.privacy.profileVisibility}
                  onValueChange={(value) =>
                    setSettings({
                      ...settings,
                      privacy: {
                        ...settings.privacy,
                        profileVisibility: value,
                      },
                    })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Selecciona visibilidad" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="public">Público</SelectItem>
                    <SelectItem value="contacts">Solo contactos</SelectItem>
                    <SelectItem value="private">Privado</SelectItem>
                  </SelectContent>
                </Select>
              </FormField>

              <div className="flex items-center justify-between md:flex-col md:items-start md:justify-start gap-2">
                <div>
                  <p className="font-medium flex items-center gap-2">
                    <Key className="h-4 w-4" />
                    Autenticación de dos factores
                  </p>
                  <p className="text-sm text-content-subtle">
                    Añade una capa extra de seguridad
                  </p>
                </div>
                <FormSwitch
                  checked={settings.privacy.twoFactorEnabled}
                  onCheckedChange={(checked) =>
                    setSettings({
                      ...settings,
                      privacy: {
                        ...settings.privacy,
                        twoFactorEnabled: checked,
                      },
                    })
                  }
                />
              </div>
            </div>

            {/* Sesiones activas */}
            <div className="mt-6">
              <h3 className="font-medium mb-4">Sesiones activas</h3>
              <div className="space-y-4">
                {settings.sessions.map((session, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div>
                      <p className="font-medium">{session.device}</p>
                      <p className="text-sm text-content-subtle">
                        {session.location} • {session.lastAccess}
                      </p>
                    </div>
                    {!session.current && (
                      <Button
                        variant="ghost"
                        size="sm"
                        className="text-red-600 hover:text-red-700 hover:bg-red-50"
                      >
                        Cerrar sesión
                      </Button>
                    )}
                    {session.current && (
                      <span className="text-sm text-primary font-medium">
                        Sesión actual
                      </span>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </Card>

        <div className="flex justify-end">
          <Button type="submit" disabled={isUpdating} size="lg">
            {isUpdating ? (
              <>Guardando...</>
            ) : (
              <>
                <Save className="h-4 w-4 mr-2" />
                Guardar cambios
              </>
            )}
          </Button>
        </div>
      </form>
    </div>
  );
}


Ruta: app\(dashboard)\dashboard\team\page.tsx
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { FormInput } from "@/components/ui/form-input";
import { FormTextarea } from "@/components/ui/form-textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Plus,
  Search,
  User,
  Mail,
  UserPlus,
  Users,
  Shield,
  MoreVertical,
  Clock,
  Edit,
  Trash,
  Star,
  Calendar,
} from "lucide-react";

interface TeamMember {
  id: string;
  name: string;
  email: string;
  role: string;
  department: string;
  status: "active" | "inactive";
  joinedAt: string;
  avatar?: string;
  bio: string;
  isAdmin: boolean;
}

export default function TeamPage() {
  const [members, setMembers] = useState<TeamMember[]>([
    {
      id: "1",
      name: "Carlos Rodríguez",
      email: "carlos@example.com",
      role: "Frontend Developer",
      department: "Engineering",
      status: "active",
      joinedAt: "2024-01-15",
      bio: "Frontend Developer con 5 años de experiencia",
      isAdmin: true,
    },
    {
      id: "2",
      name: "Ana Martínez",
      email: "ana@example.com",
      role: "UX Designer",
      department: "Design",
      status: "active",
      joinedAt: "2024-02-01",
      bio: "UX Designer apasionada por la experiencia de usuario",
      isAdmin: false,
    },
  ]);

  const [isCreating, setIsCreating] = useState(false);
  const [isEditing, setIsEditing] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedDepartment, setSelectedDepartment] = useState<string>("all");

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    role: "",
    department: "",
    bio: "",
    isAdmin: false,
  });

  const departments = [
    "Engineering",
    "Design",
    "Marketing",
    "Sales",
    "Customer Support",
  ];

  const roles = {
    Engineering: [
      "Frontend Developer",
      "Backend Developer",
      "Full Stack Developer",
      "DevOps Engineer",
    ],
    Design: [
      "UX Designer",
      "UI Designer",
      "Product Designer",
      "Graphic Designer",
    ],
    Marketing: [
      "Marketing Manager",
      "Content Writer",
      "SEO Specialist",
      "Social Media Manager",
    ],
    Sales: [
      "Sales Representative",
      "Account Executive",
      "Sales Manager",
      "Business Developer",
    ],
    "Customer Support": [
      "Support Agent",
      "Customer Success Manager",
      "Support Team Lead",
    ],
  };

  const filteredMembers = members
    .filter(
      (member) =>
        member.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        member.email.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .filter((member) =>
      selectedDepartment === "all"
        ? true
        : member.department === selectedDepartment
    );

  const handleSave = () => {
    const newMember = {
      id: isEditing || Date.now().toString(),
      ...formData,
      status: "active" as const,
      joinedAt: new Date().toISOString().split("T")[0],
    };

    if (isEditing) {
      setMembers(members.map((m) => (m.id === isEditing ? newMember : m)));
    } else {
      setMembers([...members, newMember]);
    }

    setIsCreating(false);
    setIsEditing(null);
    resetForm();
  };

  const handleEdit = (member: TeamMember) => {
    setIsEditing(member.id);
    setFormData({
      name: member.name,
      email: member.email,
      role: member.role,
      department: member.department,
      bio: member.bio,
      isAdmin: member.isAdmin,
    });
  };

  const handleDelete = (id: string) => {
    if (
      confirm("¿Estás seguro de que deseas eliminar este miembro del equipo?")
    ) {
      setMembers(members.filter((m) => m.id !== id));
    }
  };

  const resetForm = () => {
    setFormData({
      name: "",
      email: "",
      role: "",
      department: "",
      bio: "",
      isAdmin: false,
    });
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-content-emphasis">Equipo</h1>
        <p className="text-content-subtle mt-2">
          Gestiona los miembros de tu equipo y sus roles
        </p>
      </div>

      {/* Filtros y acciones */}
      <Card className="p-6">
        <div className="flex flex-col md:flex-row gap-4 items-start md:items-center justify-between">
          <div className="flex flex-1 gap-4">
            <FormInput
              icon={Search}
              placeholder="Buscar miembro..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-xs"
            />
            <Select
              value={selectedDepartment}
              onValueChange={setSelectedDepartment}
            >
              <SelectTrigger className="w-[180px]">
                <Users className="h-4 w-4 mr-2" />
                <SelectValue placeholder="Filtrar por departamento" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Todos los departamentos</SelectItem>
                {departments.map((dept) => (
                  <SelectItem key={dept} value={dept}>
                    {dept}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <Button onClick={() => setIsCreating(true)}>
            <UserPlus className="h-4 w-4 mr-2" />
            Agregar Miembro
          </Button>
        </div>
      </Card>

      {/* Lista de miembros */}
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {filteredMembers.map((member) => (
          <Card key={member.id} className="p-6">
            <div className="flex items-start justify-between">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                  <User className="h-6 w-6 text-primary" />
                </div>
                <div>
                  <h3 className="font-medium flex items-center gap-2">
                    {member.name}
                    {member.isAdmin && (
                      <Star className="h-4 w-4 text-yellow-500 fill-current" />
                    )}
                  </h3>
                  <p className="text-sm text-content-subtle">{member.email}</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleEdit(member)}
                >
                  <Edit className="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleDelete(member.id)}
                >
                  <Trash className="h-4 w-4" />
                </Button>
              </div>
            </div>

            <div className="mt-6 space-y-4">
              <div className="flex items-center gap-2 text-sm">
                <Shield className="h-4 w-4 text-content-subtle" />
                <span>{member.role}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Users className="h-4 w-4 text-content-subtle" />
                <span>{member.department}</span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Calendar className="h-4 w-4 text-content-subtle" />
                <span>
                  Se unió el {new Date(member.joinedAt).toLocaleDateString()}
                </span>
              </div>
            </div>

            <p className="mt-4 text-sm text-content-subtle">{member.bio}</p>
          </Card>
        ))}
      </div>

      {/* Modal de creación/edición */}
      {(isCreating || isEditing) && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center">
          <Card className="w-full max-w-2xl p-6 m-4">
            <h2 className="text-xl font-semibold mb-6">
              {isEditing ? "Editar Miembro" : "Nuevo Miembro"}
            </h2>
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <FormInput
                  label="Nombre completo"
                  icon={User}
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                  required
                />
                <FormInput
                  label="Correo electrónico"
                  icon={Mail}
                  type="email"
                  value={formData.email}
                  onChange={(e) =>
                    setFormData({ ...formData, email: e.target.value })
                  }
                  required
                />

                <Select
                  value={formData.department}
                  onValueChange={(value) =>
                    setFormData({ ...formData, department: value, role: "" })
                  }
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccionar departamento" />
                  </SelectTrigger>
                  <SelectContent>
                    {departments.map((dept) => (
                      <SelectItem key={dept} value={dept}>
                        {dept}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>

                <Select
                  value={formData.role}
                  onValueChange={(value) =>
                    setFormData({ ...formData, role: value })
                  }
                  disabled={!formData.department}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Seleccionar rol" />
                  </SelectTrigger>
                  <SelectContent>
                    {formData.department &&
                      roles[formData.department as keyof typeof roles].map(
                        (role) => (
                          <SelectItem key={role} value={role}>
                            {role}
                          </SelectItem>
                        )
                      )}
                  </SelectContent>
                </Select>

                <div className="md:col-span-2">
                  <FormTextarea
                    label="Biografía"
                    value={formData.bio}
                    onChange={(e) =>
                      setFormData({ ...formData, bio: e.target.value })
                    }
                  />
                </div>

                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    id="isAdmin"
                    checked={formData.isAdmin}
                    onChange={(e) =>
                      setFormData({ ...formData, isAdmin: e.target.checked })
                    }
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <label htmlFor="isAdmin" className="text-sm font-medium">
                    Dar permisos de administrador
                  </label>
                </div>
              </div>

              <div className="flex justify-end gap-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsCreating(false);
                    setIsEditing(null);
                    resetForm();
                  }}
                >
                  Cancelar
                </Button>
                <Button onClick={handleSave}>
                  {isEditing ? "Guardar cambios" : "Agregar miembro"}
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
}


Ruta: app\(dashboard)\layout.tsx
// app/(dashboard)/layout.tsx
"use client";

import { Sidebar } from "@/components/dashboard/sidebar";
import { MobileSidebar } from "@/components/dashboard/mobile-sidebar";
import { Header } from "@/components/dashboard/header";
import { useState } from "react";
import { cn } from "@/lib/utils";

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed);
  };

  return (
    <div className={cn(
      "min-h-screen flex flex-col",
      isMobileMenuOpen && "h-screen overflow-hidden"
    )}>
      {/* Header Fixed */}
      <Header
        isMobileMenuOpen={isMobileMenuOpen}
        setIsMobileMenuOpen={setIsMobileMenuOpen}
        className="h-14"
      />

      <div className="flex-1 flex pt-14">
        {/* Sidebar Desktop - Fixed */}
        <aside
          className={cn(
            "fixed top-14 bottom-0 left-0 z-30",
            "hidden lg:block",
            isCollapsed ? "w-16" : "w-64",
            "border-r border-border bg-background transition-all duration-300"
          )}
        >
          <Sidebar isCollapsed={isCollapsed} toggleCollapse={toggleCollapse} />
        </aside>
        {/* Mobile Sidebar - Considerando el header */}
        <MobileSidebar
          isOpen={isMobileMenuOpen}
          onClose={() => setIsMobileMenuOpen(false)}
          headerHeight="h-14"
        />
        {/* Main Content */}
        <main className={cn("flex-1", "lg:pl-64", isCollapsed && "lg:pl-16")}>
          <div className="container p-6 h-full">{children}</div>
        </main>
      </div>
    </div>
  );
}

Ruta: app\api\auth\[...nextauth]\route.ts
// app/api/auth/[...nextauth]/route.ts
import { handlers } from "@/auth";

export const { GET, POST } = handlers;


Ruta: app\globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}


Ruta: app\layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({ variable: "--font-geist-sans", subsets: ["latin"] });
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}


Ruta: app\page.tsx
// app/page.tsx
import Image from "next/image";

export default function Home() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-background">
      <h1 className="text-4xl font-bold text-content-emphasis">Bienvenido</h1>
      <p className="text-content-subtle mt-4">
        Esta es la página de inicio de tu aplicación.
      </p>
    </div>
  );
}


Ruta: auth.config.ts
import type { NextAuthConfig } from "next-auth";
import { z } from "zod";

export const authConfig = {
  pages: {
    signIn: "/login",
    error: "/login",
    signOut: "/login",
    verifyRequest: "/verify-request",
  },
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 días
    updateAge: 24 * 60 * 60, // 24 horas
  },
  cookies: {
    sessionToken: {
      name:
        process.env.NODE_ENV === "production"
          ? "__Secure-next-auth.session-token"
          : "next-auth.session-token",
      options: {
        httpOnly: true,
        sameSite: "lax",
        path: "/",
        secure: process.env.NODE_ENV === "production",
      },
    },
  },
  callbacks: {
    authorized({ auth, request: { nextUrl } }) {
      const isLoggedIn = !!auth?.user;
      const isOnDashboard = nextUrl.pathname.startsWith("/dashboard");
      const isOnAuth =
        nextUrl.pathname.startsWith("/login") ||
        nextUrl.pathname.startsWith("/register");

      if (isOnDashboard) {
        if (isLoggedIn) return true;
        return false; // Redirige a /login
      } else if (isOnAuth) {
        if (isLoggedIn) {
          return Response.redirect(new URL("/dashboard", nextUrl));
        }
        return true;
      }
      return true;
    },
  },
  events: {
    async signIn({ user }) {
      console.log("User signed in:", user.email);
    },
    async signOut({ token }) {
      console.log("User signed out:", token.email);
    },
    async error(error) {
      console.error("Auth error:", error);
    },
  },
} satisfies NextAuthConfig;

export const loginSchema = z.object({
  email: z.string().email("Correo electrónico inválido"),
  password: z.string().min(8, "La contraseña debe tener al menos 8 caracteres"),
});

export type LoginSchema = z.infer<typeof loginSchema>;


Ruta: auth.ts
// auth.ts
import NextAuth from "next-auth";
import Credentials from "next-auth/providers/credentials";
import { ZodError } from "zod";
import { signInSchema } from "./lib/zod";

export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [
    Credentials({
      credentials: {
        email: {},
        password: {},
      },
      async authorize(credentials) {
        try {
          // Validamos las credenciales de prueba
          if (
            credentials?.email === "test@example.com" &&
            credentials?.password === "123456"
          ) {
            return {
              id: "1",
              email: "test@example.com",
              name: "Usuario de Prueba",
            };
          }
          return null;
        } catch (error) {
          if (error instanceof ZodError) {
            return null;
          }
          throw error;
        }
      },
    }),
  ],
  pages: {
    signIn: "/login",
  },
  callbacks: {
    authorized({ auth, request: { nextUrl } }) {
      const isLoggedIn = !!auth?.user;
      const isOnDashboard = nextUrl.pathname.startsWith("/dashboard");

      if (isOnDashboard) {
        if (isLoggedIn) return true;
        // Redirige a login con returnUrl
        return Response.redirect(new URL("/login", nextUrl));
      }

      return true;
    },
  },
});


Ruta: components\auth\auth-form.tsx
// components/auth/auth-form.tsx
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { Loader2 } from "lucide-react";
import { FormEvent, ReactNode } from "react";

interface AuthFormProps {
  onSubmit: (e: FormEvent<HTMLFormElement>) => Promise<void>;
  children: ReactNode;
  error?: string | null;
  submitText: string;
  isLoading?: boolean;
  footerContent?: ReactNode;
  className?: string;
}

export function AuthForm({
  onSubmit,
  children,
  error,
  submitText,
  isLoading = false,
  footerContent,
  className,
}: AuthFormProps) {
  return (
    <Card className={cn("p-6", className)}>
      <form onSubmit={onSubmit} className="space-y-6">
        <div className="space-y-4">{children}</div>

        {error && (
          <div className="p-3 rounded-lg bg-red-50 border border-red-200">
            <p className="text-sm text-red-600 text-center">{error}</p>
          </div>
        )}

        <Button type="submit" className="w-full" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Cargando...
            </>
          ) : (
            submitText
          )}
        </Button>

        {footerContent && (
          <div className="mt-6 relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">
                {footerContent}
              </span>
            </div>
          </div>
        )}
      </form>
    </Card>
  );
}


Ruta: components\auth\auth-layout.tsx
// components/auth/auth-layout.tsx
import { cn } from "@/lib/utils";
import { AlertCircleIcon, CheckIcon, XIcon } from "lucide-react";
import Image from "next/image";
import { ReactNode } from "react";

interface AuthLayoutProps {
  children: ReactNode;
  title: string;
  subtitle?: string;
  showDemoAlert?: boolean;
}

export function AuthLayout({
  children,
  title,
  subtitle,
  showDemoAlert = true,
}: AuthLayoutProps) {
  return (
    <div className="min-h-screen w-full flex flex-col lg:flex-row">
      {/* Lado izquierdo - Área de decoración */}
      <div className="hidden lg:flex lg:w-1/2 relative bg-primary p-12 items-center justify-center">
        <div className="relative z-10 text-white max-w-lg">
          <h1 className="text 4xl font-bold mb-6">Bienvenido a SaasStarter</h1>
          <p className="text-lg opacity-90 mb-8">
            Una plataforma moderna y completa para iniciar tu próximo proyecto
            SaaS.
          </p>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center gap-2">
              <CheckIcon className="w-5 h-5" />
              <span>Authentication</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckIcon className="w-5 h-5" />
              <span>Dashboard</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckIcon className="w-5 h-5" />
              <span>User Management</span>
            </div>
            <div className="flex items-center gap-2">
              <CheckIcon className="w-5 h-5" />
              <span>Roles & Permissions</span>
            </div>
          </div>
        </div>
        {/* Patrón de fondo */}
        <div className="absolute inset-0 z-0">
          <div className="absolute inset-0 bg-gradient-to-br from-primary/90 to-primary" />
          <div className="absolute inset-0 bg-[url('/grid.svg')] opacity-20" />
        </div>
      </div>

      {/* Lado derecho - Formulario */}
      <div className="flex-1 flex flex-col min-h-screen">
        {showDemoAlert && (
          <div className="bg-yellow-50 border-b border-yellow-200">
            <div className="max-w-lg mx-auto py-2 px-4 flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <AlertCircleIcon className="text-yellow-600" />
                <p className="text-sm text-yellow-700">
                  Modo demo: Usa{" "}
                  <span className="font-mono">test@example.com</span> /{" "}
                  <span className="font-mono">test</span>
                </p>
              </div>
              <button className="text-yellow-600 hover:text-yellow-800">
                <XIcon className="w-4 h-4" />
              </button>
            </div>
          </div>
        )}
        <div className="flex-1 flex items-center justify-center p-6">
          <div className="w-full max-w-md space-y-8">
            <div className="text-center">
              <h2 className="text-3xl font-bold tracking-tight text-gray-900">
                {title}
              </h2>
              {subtitle && (
                <p className="mt-2 text-sm text-gray-600">{subtitle}</p>
              )}
            </div>
            {children}
          </div>
        </div>
        <footer className="py-4 text-center text-sm text-gray-500">
          © 2024 SaasStarter. All rights reserved.
        </footer>
      </div>
    </div>
  );
}


Ruta: components\auth\providers-buttons.tsx
// components/auth/providers-buttons.tsx
import { Button } from "@/components/ui/button";

interface ProvidersButtonsProps {
  onGoogleClick?: () => void;
  onGithubClick?: () => void;
  isLoading?: boolean;
}

export function ProvidersButtons({
  onGoogleClick,
  onGithubClick,
  isLoading = false,
}: ProvidersButtonsProps) {
  return (
    <div className="grid grid-cols-2 gap-3">
      <Button
        type="button"
        variant="outline"
        onClick={onGoogleClick}
        disabled={isLoading}
        className="w-full"
      >
        Google
      </Button>

      <Button
        type="button"
        variant="outline"
        onClick={onGithubClick}
        disabled={isLoading}
        className="w-full"
      >
        GitHub
      </Button>
    </div>
  );
}


Ruta: components\dashboard\date-range-picker.tsx
"use client";

import { Button } from "@/components/ui/button";
import { Calendar } from "lucide-react";
import { useState } from "react";

interface DateRangePickerProps {
  value: { start: Date; end: Date };
  onChange: (range: { start: Date; end: Date }) => void;
  className?: string;
}

export function DateRangePicker({
  value,
  onChange,
  className,
}: DateRangePickerProps) {
  return (
    <Button variant="outline" className={className}>
      <Calendar className="h-4 w-4 mr-2" />
      Oct 18 - Nov 18
    </Button>
  );
}


Ruta: components\dashboard\header.tsx
// components/dashboard/header.tsx
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Bell, Search, X, Menu } from "lucide-react";
import { UserNav } from "./user-nav";
import { cn } from "@/lib/utils";

interface HeaderProps {
  isMobileMenuOpen: boolean;
  setIsMobileMenuOpen: (open: boolean) => void;
  className?: string;
}

export function Header({
  isMobileMenuOpen,
  setIsMobileMenuOpen,
  className,
}: HeaderProps) {
  const [showMobileSearch, setShowMobileSearch] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Evitar hidratación
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <header
      className={cn(
        "sticky top-0 z-50 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60",
        className
      )}
    >
      <div className="container flex h-14 max-w-screen-2xl items-center">
        {/* Botón de menú móvil */}
        <Button
          variant="ghost"
          size="icon"
          className="lg:hidden"
          onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
        >
          {isMobileMenuOpen ? (
            <X className="h-6 w-6" />
          ) : (
            <Menu className="h-6 w-6" />
          )}
          <span className="sr-only">Toggle menu</span>
        </Button>

        {/* Logo */}
        <Link
          href="/dashboard"
          className={cn(
            "mr-6 flex items-center space-x-2",
            showMobileSearch && "hidden md:flex"
          )}
        >
          <span className="font-bold">Logo</span>
        </Link>

        <div className="flex flex-1 items-center justify-between space-x-2 md:justify-end">
          {/* Búsqueda móvil expandida */}
          {showMobileSearch ? (
            <div className="absolute inset-x-0 top-0 bg-background px-4 py-2 md:hidden">
              <div className="relative flex items-center space-x-2">
                <Input
                  type="search"
                  placeholder="Buscar..."
                  className="w-full pl-8"
                />
                <Search className="absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => setShowMobileSearch(false)}
                >
                  <X className="h-5 w-5" />
                </Button>
              </div>
            </div>
          ) : (
            <>
              {/* Botón de búsqueda móvil */}
              <Button
                variant="ghost"
                size="icon"
                className="md:hidden"
                onClick={() => setShowMobileSearch(true)}
              >
                <Search className="h-5 w-5" />
                <span className="sr-only">Buscar</span>
              </Button>

              {/* Búsqueda desktop */}
              <div className="hidden md:block">
                <div className="relative">
                  <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="search"
                    placeholder="Buscar..."
                    className="w-[200px] pl-8"
                  />
                </div>
              </div>
            </>
          )}

          {/* Notificaciones y perfil */}
          <div
            className={cn(
              "flex items-center space-x-2",
              showMobileSearch && "hidden md:flex"
            )}
          >
            <Button variant="ghost" size="icon" className="relative">
              <Bell className="h-5 w-5" />
              <span className="absolute right-0 top-0 h-2 w-2 rounded-full bg-primary" />
              <span className="sr-only">Notificaciones</span>
            </Button>
            <UserNav />
          </div>
        </div>
      </div>
    </header>
  );
}


Ruta: components\dashboard\integrations-list.tsx
import { Card } from "@/components/ui/card";

const integrations = [
  {
    name: "Stripe",
    type: "Finance",
    rate: 40,
    profit: "$650.00",
    icon: "💳",
  },
  {
    name: "Zapier",
    type: "CRM",
    rate: 80,
    profit: "$720.50",
    icon: "⚡",
  },
  {
    name: "Shopify",
    type: "Marketplace",
    rate: 20,
    profit: "$432.25",
    icon: "🛍️",
  },
];

export function IntegrationsList() {
  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold">Lista de integraciones</h3>
        <button className="text-primary text-sm">Ver todo</button>
      </div>
      <div className="space-y-4">
        {integrations.map((integration) => (
          <div
            key={integration.name}
            className="flex items-center justify-between"
          >
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{integration.icon}</span>
              <div>
                <h4 className="font-medium">{integration.name}</h4>
                <p className="text-sm text-gray-500">{integration.type}</p>
              </div>
            </div>
            <div className="text-right">
              <div className="font-medium">{integration.profit}</div>
              <div className="text-sm text-gray-500">{integration.rate}%</div>
            </div>
          </div>
        ))}
      </div>
    </Card>
  );
}


Ruta: components\dashboard\mobile-menu.tsx
// components/dashboard/mobile-menu.tsx
"use client";

import { useState, useEffect } from "react";
import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import { Sidebar } from "./sidebar";

export function MobileMenu() {
  const [open, setOpen] = useState(false);

  // Cerrar el menú cuando la pantalla se hace más grande
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        setOpen(false);
      }
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  return (
    <Sheet open={open} onOpenChange={setOpen}>
      <SheetTrigger asChild>
        <Button variant="ghost" size="icon" className="lg:hidden">
          <Menu className="h-6 w-6" />
          <span className="sr-only">Abrir menú</span>
        </Button>
      </SheetTrigger>
      <SheetContent
        side="left"
        className="w-[280px] p-0 max-w-[85vw] overflow-y-auto"
      >
        <SheetHeader>
          <SheetTitle className="px-6 py-4 text-lg font-semibold">
            Menú
          </SheetTitle>
        </SheetHeader>
        <Sidebar className="w-full" onItemClick={() => setOpen(false)} />
      </SheetContent>
    </Sheet>
  );
}


Ruta: components\dashboard\mobile-sidebar.tsx
// components/dashboard/mobile-sidebar.tsx
"use client";

import { cn } from "@/lib/utils";
import { navigation } from "@/config/navigation";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useEffect } from "react";

interface MobileSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  headerHeight: string;
}

export function MobileSidebar({
  isOpen,
  onClose,
  headerHeight,
}: MobileSidebarProps) {
  const pathname = usePathname();

  // Controlar el scroll del body cuando el sidebar está abierto
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "auto";
    }

    // Cleanup: restaurar el scroll cuando el componente se desmonte
    return () => {
      document.body.style.overflow = "auto";
    };
  }, [isOpen]);

  return (
    <>
      {/* Overlay */}
      <div
        className={cn(
          "fixed inset-0 z-40 bg-black/50 lg:hidden transition-opacity duration-300",
          "mt-14", // Espacio para el header
          isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
        )}
        onClick={onClose}
      />

      {/* Sidebar Mobile Container */}
      <div
        className={cn(
          "fixed left-0 z-40 w-64 bg-background transform transition-transform duration-300 ease-in-out lg:hidden",
          "top-14 bottom-0", // Posicionamiento considerando el header
          isOpen ? "translate-x-0" : "-translate-x-full"
        )}
      >
        {/* Contenedor con scroll interno */}
        <div className="h-full flex flex-col">
          {/* Área de navegación scrolleable */}
          <div className="flex-1 overflow-y-auto">
            <nav className="px-3 py-4">
              {navigation.map((group) => (
                <div key={group.title} className="mb-6">
                  <h3 className="px-4 text-sm font-semibold text-muted-foreground mb-2">
                    {group.title}
                  </h3>
                  <div className="space-y-1">
                    {group.items.map((item) => (
                      <Link
                        key={item.href}
                        href={item.href}
                        onClick={onClose}
                        className={cn(
                          "flex items-center gap-x-3 px-4 py-2 text-sm font-medium rounded-md",
                          "transition-colors duration-200",
                          pathname === item.href
                            ? "bg-accent text-accent-foreground"
                            : "hover:bg-accent/50"
                        )}
                      >
                        <item.icon className="h-5 w-5 shrink-0" />
                        <span>{item.name}</span>
                        {item.badge && (
                          <span className="ml-auto flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground">
                            {item.badge}
                          </span>
                        )}
                      </Link>
                    ))}
                  </div>
                </div>
              ))}
            </nav>
          </div>
        </div>
      </div>
    </>
  );
}


Ruta: components\dashboard\recent-activity.tsx
interface Activity {
  id: string;
  type: string;
  description: string;
  date: string;
}

interface RecentActivityProps {
  activities: Activity[];
}

export function RecentActivity({ activities }: RecentActivityProps) {
  return (
    <div className="bg-background rounded-xl border border-border p-6">
      <h3 className="text-lg font-semibold text-content-emphasis mb-4">
        Actividad Reciente
      </h3>
      <div className="space-y-4">
        {activities.map((activity) => (
          <div key={activity.id} className="flex items-start space-x-3 text-sm">
            <div className="w-2 h-2 mt-1.5 rounded-full bg-primary" />
            <div>
              <p className="text-content">{activity.description}</p>
              <p className="text-content-subtle">{activity.date}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}


Ruta: components\dashboard\sales-distribution.tsx
import { Card } from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const salesData = [
  {
    source: "Website",
    amount: "$374.82",
    percentage: 45,
    color: "bg-primary",
  },
  {
    source: "Mobile App",
    amount: "$241.60",
    percentage: 30,
    color: "bg-secondary",
  },
  {
    source: "Other",
    amount: "$213.42",
    percentage: 25,
    color: "bg-accent",
  },
];

export function SalesDistribution() {
  return (
    <Card className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold">Distribución de ventas</h3>
        <Select defaultValue="monthly">
          <SelectTrigger className="w-[140px]">
            <SelectValue placeholder="Seleccionar período" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="daily">Diario</SelectItem>
            <SelectItem value="weekly">Semanal</SelectItem>
            <SelectItem value="monthly">Mensual</SelectItem>
            <SelectItem value="yearly">Anual</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-6">
        {/* Gráfico circular */}
        <div className="relative aspect-square">
          <div className="absolute inset-0">
            <svg className="w-full h-full" viewBox="0 0 100 100">
              {salesData.map((item, index) => {
                const startAngle = salesData
                  .slice(0, index)
                  .reduce((acc, curr) => acc + curr.percentage, 0);
                const endAngle = startAngle + item.percentage;

                const x1 = 50 + 40 * Math.cos((startAngle / 100) * 2 * Math.PI);
                const y1 = 50 + 40 * Math.sin((startAngle / 100) * 2 * Math.PI);
                const x2 = 50 + 40 * Math.cos((endAngle / 100) * 2 * Math.PI);
                const y2 = 50 + 40 * Math.sin((endAngle / 100) * 2 * Math.PI);

                const largeArcFlag = item.percentage > 50 ? 1 : 0;

                return (
                  <path
                    key={item.source}
                    d={`M 50 50 L ${x1} ${y1} A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2} Z`}
                    className={item.color}
                    opacity={0.8}
                  />
                );
              })}
            </svg>
          </div>
        </div>

        {/* Leyenda y detalles */}
        <div className="space-y-4">
          {salesData.map((item) => (
            <div
              key={item.source}
              className="flex items-center justify-between"
            >
              <div className="flex items-center space-x-3">
                <div className={`w-3 h-3 rounded-full ${item.color}`}></div>
                <div>
                  <p className="font-medium">{item.source}</p>
                  <p className="text-sm text-gray-500">{item.percentage}%</p>
                </div>
              </div>
              <p className="font-medium">{item.amount}</p>
            </div>
          ))}
        </div>

        {/* Barra de progreso total */}
        <div className="pt-4 border-t">
          <div className="flex justify-between text-sm mb-2">
            <span className="text-gray-500">Progreso total</span>
            <span className="font-medium">78%</span>
          </div>
          <div className="h-2 bg-gray-100 rounded-full overflow-hidden">
            <div className="h-full bg-primary" style={{ width: "78%" }}></div>
          </div>
        </div>
      </div>
    </Card>
  );
}


Ruta: components\dashboard\sidebar.tsx
// components/dashboard/sidebar.tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { cn } from "@/lib/utils";
import {
  LayoutDashboard,
  Users,
  Settings,
  CreditCard,
  LineChart,
  MessagesSquare,
  UserPlus,
  HelpCircle,
  User,
  Boxes,
  ChevronLeft,
  ChevronRight,
} from "lucide-react";
import { Button } from "@/components/ui/button";

const navigation = [
  {
    title: "Principal",
    items: [
      {
        name: "Dashboard",
        href: "/dashboard",
        icon: LayoutDashboard,
        description: "Vista general de tu cuenta",
      },
      {
        name: "Analytics",
        href: "/dashboard/analytics",
        icon: LineChart,
        description: "Estadísticas y métricas",
      },
    ],
  },
  {
    title: "Gestión",
    items: [
      {
        name: "Productos",
        href: "/dashboard/products",
        icon: Boxes,
        description: "Gestiona tus productos",
      },
      {
        name: "Clientes",
        href: "/dashboard/customers",
        icon: Users,
        description: "Administra tus clientes",
      },
      {
        name: "Mensajes",
        href: "/dashboard/messages",
        icon: MessagesSquare,
        description: "Centro de mensajes",
        badge: "3",
      },
    ],
  },
  {
    title: "Equipo",
    items: [
      {
        name: "Invitaciones",
        href: "/dashboard/invite",
        icon: UserPlus,
        description: "Invita nuevos miembros",
      },
      {
        name: "Miembros",
        href: "/dashboard/team",
        icon: Users,
        description: "Gestiona tu equipo",
      },
    ],
  },
  {
    title: "Cuenta",
    items: [
      {
        name: "Perfil",
        href: "/dashboard/profile",
        icon: User,
        description: "Tus datos personales",
      },
      {
        name: "Facturación",
        href: "/dashboard/billing",
        icon: CreditCard,
        description: "Planes y pagos",
      },
      {
        name: "Configuración",
        href: "/dashboard/settings",
        icon: Settings,
        description: "Preferencias de cuenta",
      },
      {
        name: "Ayuda",
        href: "/dashboard/help",
        icon: HelpCircle,
        description: "Soporte y documentación",
      },
    ],
  },
];

interface SidebarProps {
  className?: string;
  onItemClick?: () => void;
  isCollapsed?: boolean;
  toggleCollapse?: () => void;
}

export function Sidebar({
  className,
  onItemClick,
  isCollapsed,
  toggleCollapse,
}: SidebarProps) {
  const pathname = usePathname();

  return (
    <div className={cn("h-full flex flex-col", className)}>
      {/* Collapse Button - Only show on desktop */}
      <div className="hidden lg:flex justify-end p-2">
        <Button
          variant="ghost"
          size="icon"
          onClick={toggleCollapse}
          className="shrink-0"
        >
          {isCollapsed ? (
            <ChevronRight className="h-4 w-4" />
          ) : (
            <ChevronLeft className="h-4 w-4" />
          )}
        </Button>
      </div>

      {/* Navigation */}
      <nav className="flex-1 space-y-4 overflow-y-auto">
        {navigation.map((group) => (
          <div key={group.title} className="px-3">
            {!isCollapsed && (
              <h3 className="mb-2 px-4 text-sm font-semibold tracking-tight text-muted-foreground">
                {group.title}
              </h3>
            )}
            <div className="space-y-1">
              {group.items.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  onClick={onItemClick}
                  className={cn(
                    "group flex items-center justify-between rounded-md px-3 py-2 text-sm font-medium transition-colors",
                    "hover:bg-accent hover:text-accent-foreground",
                    pathname === item.href
                      ? "bg-accent text-accent-foreground"
                      : "transparent",
                    "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
                    isCollapsed && "justify-center"
                  )}
                >
                  <div className="flex items-center gap-x-3">
                    <item.icon className="h-4 w-4 shrink-0" />
                    {!isCollapsed && <span>{item.name}</span>}
                  </div>
                  {!isCollapsed && item.badge && (
                    <span className="flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs text-primary-foreground">
                      {item.badge}
                    </span>
                  )}
                </Link>
              ))}
            </div>
          </div>
        ))}
      </nav>
    </div>
  );
}


Ruta: components\dashboard\stats-card.tsx
import { Card } from "@/components/ui/card";
import { ArrowUpIcon, ArrowDownIcon } from "lucide-react";
import { LucideIcon } from "lucide-react";

interface StatsCardProps {
  title: string;
  value: string;
  change: string;
  trend: "up" | "down";
  icon: LucideIcon;
}

export function StatsCard({
  title,
  value,
  change,
  trend,
  icon: Icon,
}: StatsCardProps) {
  return (
    <Card className="p-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <div className="p-2 bg-primary/10 rounded-lg">
            <Icon className="h-5 w-5 text-primary" />
          </div>
          <h3 className="text-sm font-medium text-gray-500">{title}</h3>
        </div>
      </div>
      <div className="mt-4">
        <div className="text-2xl font-semibold">{value}</div>
        <div className="flex items-center mt-1">
          {trend === "up" ? (
            <ArrowUpIcon className="h-4 w-4 text-green-500" />
          ) : (
            <ArrowDownIcon className="h-4 w-4 text-red-500" />
          )}
          <span className={trend === "up" ? "text-green-500" : "text-red-500"}>
            {change}
          </span>
        </div>
      </div>
    </Card>
  );
}


Ruta: components\dashboard\user-avatar.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { auth } from "@/auth";

export function UserAvatar() {
  const [isUploading, setIsUploading] = useState(false);

  async function handleAvatarChange(
    event: React.ChangeEvent<HTMLInputElement>
  ) {
    if (!event.target.files?.[0]) return;

    setIsUploading(true);
    try {
      // Aquí implementaremos la subida del avatar cuando tengamos el backend
    } catch (error) {
      console.error("Error al subir el avatar:", error);
    } finally {
      setIsUploading(false);
    }
  }

  return (
    <div className="relative">
      <input
        type="file"
        accept="image/*"
        className="hidden"
        id="avatar-upload"
        onChange={handleAvatarChange}
        disabled={isUploading}
      />
      <label htmlFor="avatar-upload">
        <Button
          variant="ghost"
          className="relative w-10 h-10 rounded-full overflow-hidden border border-border hover:border-border-focus"
          disabled={isUploading}
        >
          {/* Placeholder de avatar - Reemplazar con imagen real cuando tengamos backend */}
          <div className="w-full h-full bg-secondary flex items-center justify-center">
            <span className="text-lg font-medium text-secondary-foreground">
              A
            </span>
          </div>
          {isUploading && (
            <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
              <span className="text-white text-sm">Subiendo...</span>
            </div>
          )}
        </Button>
      </label>
    </div>
  );
}


Ruta: components\dashboard\user-nav.tsx
// components/dashboard/user-nav.tsx
"use client";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { signOut } from "next-auth/react";
import { useRouter } from "next/navigation";
import {
  User,
  Settings,
  CreditCard,
  HelpCircle,
  LifeBuoy,
  LogOut,
  Mail,
  MessageSquare,
  Plus,
  UserPlus,
  Users,
} from "lucide-react";

export function UserNav() {
  const router = useRouter();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-8 w-8 rounded-full">
          <Avatar className="h-8 w-8">
            <AvatarImage src="" alt="Avatar" />
            <AvatarFallback>YA</AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-56" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-1">
            <p className="text-sm font-medium leading-none">Young Alaska</p>
            <p className="text-xs leading-none text-muted-foreground">
              young@alaska.com
            </p>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem onClick={() => router.push("/dashboard/profile")}>
            <User className="mr-2 h-4 w-4" />
            <span>Perfil</span>
            <DropdownMenuShortcut>⇧⌘P</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => router.push("/dashboard/billing")}>
            <CreditCard className="mr-2 h-4 w-4" />
            <span>Facturación</span>
            <DropdownMenuShortcut>⌘B</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => router.push("/dashboard/settings")}>
            <Settings className="mr-2 h-4 w-4" />
            <span>Configuración</span>
            <DropdownMenuShortcut>⌘S</DropdownMenuShortcut>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => router.push("/dashboard/team")}>
            <Users className="mr-2 h-4 w-4" />
            <span>Equipo</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem
            onClick={() => router.push("/dashboard/new-project")}
          >
            <Plus className="mr-2 h-4 w-4" />
            <span>Nuevo Proyecto</span>
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => router.push("/dashboard/invite")}>
            <UserPlus className="mr-2 h-4 w-4" />
            <span>Invitar Usuarios</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuGroup>
          <DropdownMenuItem
            onClick={() => window.open("https://docs.example.com", "_blank")}
          >
            <LifeBuoy className="mr-2 h-4 w-4" />
            <span>Soporte</span>
          </DropdownMenuItem>
          <DropdownMenuItem
            onClick={() => window.open("https://docs.example.com", "_blank")}
          >
            <HelpCircle className="mr-2 h-4 w-4" />
            <span>Documentación</span>
          </DropdownMenuItem>
        </DropdownMenuGroup>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          className="text-red-600 focus:text-red-600"
          onClick={() => signOut({ callbackUrl: "/login" })}
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Cerrar Sesión</span>
          <DropdownMenuShortcut>⇧⌘Q</DropdownMenuShortcut>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


Ruta: components\ui\avatar.tsx
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";
import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };


Ruta: components\ui\button.tsx
// components/ui/button.tsx
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary",
        success: "bg-green-600 text-white hover:bg-green-700",
        warning: "bg-yellow-600 text-white hover:bg-yellow-700",
        error: "bg-red-600 text-white hover:bg-red-700",
        subtle:
          "bg-slate-100 text-slate-900 hover:bg-slate-200 dark:bg-slate-700 dark:text-slate-100",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
        xl: "h-12 px-10 rounded-lg",
        icon: "h-10 w-10",
      },
      loading: {
        true: "cursor-not-allowed opacity-70",
      },
      fullWidth: {
        true: "w-full",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
      loading: false,
      fullWidth: false,
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
  loading?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  fullWidth?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant,
      size,
      loading,
      leftIcon,
      rightIcon,
      fullWidth,
      asChild = false,
      children,
      disabled,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        className={cn(
          buttonVariants({ variant, size, loading, fullWidth, className })
        )}
        ref={ref}
        disabled={disabled || loading}
        {...props}
      >
        {loading ? (
          <>
            <svg
              className="mr-2 h-4 w-4 animate-spin"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            Cargando...
          </>
        ) : (
          <>
            {leftIcon && <span className="mr-2">{leftIcon}</span>}
            {children}
            {rightIcon && <span className="ml-2">{rightIcon}</span>}
          </>
        )}
      </Comp>
    );
  }
);

Button.displayName = "Button";

export { Button, buttonVariants };


Ruta: components\ui\card.tsx
// components/ui/card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border border-border bg-background text-content shadow transition-all duration-200",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(({ className, ...props }, ref) => (
  <h3 ref={ref} className={cn("text-lg font-bold", className)} {...props} />
));
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(({ className, ...props }, ref) => (
  <p ref={ref} className={cn("text-sm text-content-subtle", className)} {...props} />
));
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };


Ruta: components\ui\dropdown-menu.tsx
// components/ui/dropdown-menu.tsx
"use client";

import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  );
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};


Ruta: components\ui\form-input.tsx
// components/ui/form-input.tsx
import {
  FormField,
  FormLabel,
  FormDescription,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { cn } from "@/lib/utils";
import { LucideIcon } from "lucide-react";

interface FormInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  icon?: LucideIcon;
  description?: string;
  error?: string;
  fullWidth?: boolean;
  containerClassName?: string;
}

export function FormInput({
  label,
  icon: Icon,
  description,
  error,
  fullWidth = false,
  containerClassName,
  className,
  disabled,
  ...props
}: FormInputProps) {
  return (
    <FormField className={containerClassName}>
      <FormLabel>
        <div className="flex items-center gap-2 relative">
          {Icon && (
            <Icon className="h-4 w-4 text-content-subtle absolute top-3 left-2" />
          )}
          {label && label}
        </div>
      </FormLabel>
      <Input
        className={cn(
          Icon && "pl-8 !m-0",
          className
        )}
        disabled={disabled}
        {...props}
      />
      {description && <FormDescription>{description}</FormDescription>}
      {error && <FormMessage>{error}</FormMessage>}
    </FormField>
  );
}


Ruta: components\ui\form-switch.tsx
import { Switch } from "./switch";
import { FormField, FormLabel, FormDescription } from "@/components/ui/form";
import { LucideIcon } from "lucide-react";

interface FormSwitchProps {
  label?: string;
  description?: string;
  checked: boolean;
  onCheckedChange: (checked: boolean) => void;
  icon?: LucideIcon;
  size?: "sm" | "md" | "lg";
  disabled?: boolean;
  className?: string;
}

export function FormSwitch({
  label,
  description,
  checked,
  onCheckedChange,
  icon: Icon,
  size,
  disabled,
  className,
}: FormSwitchProps) {
  return (
    <div className="flex items-center justify-between py-3">
      <div className="flex items-center gap-3">
        {Icon && <Icon className="h-5 w-5 text-content-subtle" />}
        <div>
          {label && <p className="font-medium">{label}</p>}
          {description && (
            <p className="text-sm text-content-subtle">{description}</p>
          )}
        </div>
      </div>
      <Switch
        checked={checked}
        onCheckedChange={onCheckedChange}
        size={size}
        disabled={disabled}
        className={className}
      />
    </div>
  );
}


Ruta: components\ui\form-textarea.tsx
// components/ui/form-textarea.tsx
import {
  FormField,
  FormLabel,
  FormDescription,
  FormMessage,
} from "@/components/ui/form";
import { cn } from "@/lib/utils";
import { LucideIcon } from "lucide-react";

interface FormTextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
  label: string;
  icon?: LucideIcon;
  description?: string;
  error?: string;
  fullWidth?: boolean;
  containerClassName?: string;
}

export function FormTextarea({
  label,
  icon: Icon,
  description,
  error,
  fullWidth = false,
  containerClassName,
  className,
  disabled,
  ...props
}: FormTextareaProps) {
  return (
    <FormField className={containerClassName}>
      <FormLabel>
        <div className="flex items-center gap-2">
          {Icon && <Icon className="h-4 w-4 text-content-subtle" />}
          {label}
        </div>
      </FormLabel>
      <textarea
        className={cn(
          "min-h-[100px] w-full rounded-md border border-border bg-background px-3 py-2 text-sm",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          "disabled:cursor-not-allowed disabled:opacity-50",
          "resize-y",
          className
        )}
        disabled={disabled}
        {...props}
      />
      {description && <FormDescription>{description}</FormDescription>}
      {error && <FormMessage>{error}</FormMessage>}
    </FormField>
  );
}


Ruta: components\ui\form.tsx
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cn } from "@/lib/utils";

const FormField = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("space-y-2", className)} {...props} />
));
FormField.displayName = "FormField";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
      className
    )}
    {...props}
  />
));
FormLabel.displayName = "FormLabel";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-content-subtle", className)}
    {...props}
  />
));
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm font-medium text-error", className)}
    {...props}
  >
    {children}
  </p>
));
FormMessage.displayName = "FormMessage";

export { FormField, FormLabel, FormDescription, FormMessage };


Ruta: components\ui\icons.tsx
// components/ui/icons.tsx
export function CheckIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polyline points="20 6 9 17 4 12" />
    </svg>
  );
}

export function AlertIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" />
      <path d="M12 9v4" />
      <path d="M12 17h.01" />
    </svg>
  );
}

export function XIcon(props: React.ComponentProps<"svg">) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}


Ruta: components\ui\input.tsx
import * as React from "react";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-border bg-background px-3 py-2 text-sm ring-offset-background",
          "file:border-0 file:bg-transparent file:text-sm file:font-medium",
          "placeholder:text-content-subtle",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          "disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);

Input.displayName = "Input";


Ruta: components\ui\scroll-area.tsx
// components/ui/scroll-area.tsx
"use client";

import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";


import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };


Ruta: components\ui\select.tsx
// components/ui/select.tsx
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;
const SelectGroup = SelectPrimitive.Group;
const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-border bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className
    )}
    {...props}
  >
    {children}
    <ChevronDown className="h-4 w-4 opacity-50" />
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-background text-content shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
};


Ruta: components\ui\sheet.tsx
// components/ui/sheet.tsx
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Cerrar</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
));
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};


Ruta: components\ui\switch.tsx
// components/ui/switch.tsx
"use client";

import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";
import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> & {
    size?: "sm" | "md" | "lg";
  }
>(({ className, size = "md", ...props }, ref) => {
  const sizes = {
    sm: {
      container: "h-5 w-9",
      thumb: "h-3.5 w-3.5",
      translate: "translate-x-4",
    },
    md: {
      container: "h-6 w-11",
      thumb: "h-5 w-5",
      translate: "translate-x-5",
    },
    lg: {
      container: "h-7 w-14",
      thumb: "h-6 w-6",
      translate: "translate-x-7",
    },
  };

  return (
    <SwitchPrimitives.Root
      className={cn(
        "peer inline-flex shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent",
        "transition-colors duration-200 ease-in-out",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background",
        "disabled:cursor-not-allowed disabled:opacity-50",
        "data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
        sizes[size].container,
        className
      )}
      {...props}
      ref={ref}
    >
      <SwitchPrimitives.Thumb
        className={cn(
          "pointer-events-none rounded-full bg-background",
          "shadow-lg ring-0 transition-transform duration-200 ease-in-out",
          "data-[state=checked]:bg-primary-foreground data-[state=unchecked]:bg-content",
          "data-[state=checked]:" + sizes[size].translate,
          sizes[size].thumb
        )}
      />
    </SwitchPrimitives.Root>
  );
});
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };


Ruta: components\ui\table.tsx
// components/ui/table.tsx
"use client";

import * as React from "react";
import { cn } from "@/lib/utils";
import {
  flexRender,
  getCoreRowModel,
  useReactTable,
  getPaginationRowModel,
  getSortedRowModel,
  type ColumnDef,
  type SortingState,
} from "@tanstack/react-table";
import {
  ChevronDown,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  ArrowUpDown,
} from "lucide-react";
import { Button } from "./button";

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  onRowClick?: (row: TData) => void;
  pagination?: boolean;
  sorting?: boolean;
}

interface TablePaginationProps {
  table: any;
}

const TablePagination = ({ table }: TablePaginationProps) => {
  return (
    <div className="flex items-center justify-between px-2 py-4">
      <div className="flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} de{" "}
        {table.getFilteredRowModel().rows.length} fila(s) seleccionada(s).
      </div>
      <div className="flex items-center space-x-6 lg:space-x-8">
        <div className="flex items-center space-x-2">
          <p className="text-sm font-medium">Filas por página</p>
          <select
            value={table.getState().pagination.pageSize}
            onChange={(e) => {
              table.setPageSize(Number(e.target.value));
            }}
            className="h-8 w-[70px] rounded-md border border-input bg-transparent"
          >
            {[10, 20, 30, 40, 50].map((pageSize) => (
              <option key={pageSize} value={pageSize}>
                {pageSize}
              </option>
            ))}
          </select>
        </div>
        <div className="flex w-[100px] items-center justify-center text-sm font-medium">
          Página {table.getState().pagination.pageIndex + 1} de{" "}
          {table.getPageCount()}
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Ir a la primera página</span>
            <ChevronsLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            <span className="sr-only">Ir a la página anterior</span>
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Ir a la página siguiente</span>
            <ChevronRight className="h-4 w-4" />
          </Button>
          <Button
            variant="outline"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
          >
            <span className="sr-only">Ir a la última página</span>
            <ChevronsRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
};

export function DataTable<TData, TValue>({
  columns,
  data,
  onRowClick,
  pagination = true,
  sorting = true,
}: DataTableProps<TData, TValue>) {
  const [sorting_, setSorting] = React.useState<SortingState>([]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: pagination ? getPaginationRowModel() : undefined,
    getSortedRowModel: sorting ? getSortedRowModel() : undefined,
    onSortingChange: setSorting,
    state: {
      sorting: sorting_,
    },
  });

  return (
    <div className="rounded-md border">
      <div className="relative w-full overflow-auto">
        <table className="w-full caption-bottom text-sm">
          <thead className="[&_tr]:border-b">
            {table.getHeaderGroups().map((headerGroup) => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map((header) => {
                  return (
                    <th
                      key={header.id}
                      className="h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0"
                    >
                      {header.isPlaceholder ? null : (
                        <div>
                          {sorting && header.column.getCanSort() ? (
                            <Button
                              variant="ghost"
                              size="sm"
                              className="-ml-3 h-8 data-[state=open]:bg-accent"
                              onClick={header.column.getToggleSortingHandler()}
                            >
                              {flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                              )}
                              {{
                                asc: <ChevronDown className="ml-2 h-4 w-4" />,
                                desc: (
                                  <ChevronDown className="ml-2 h-4 w-4 rotate-180" />
                                ),
                              }[header.column.getIsSorted() as string] ?? (
                                <ArrowUpDown className="ml-2 h-4 w-4" />
                              )}
                            </Button>
                          ) : (
                            flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )
                          )}
                        </div>
                      )}
                    </th>
                  );
                })}
              </tr>
            ))}
          </thead>
          <tbody className="[&_tr:last-child]:border-0">
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <tr
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                  className={cn(
                    "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
                    onRowClick && "cursor-pointer"
                  )}
                  onClick={() => onRowClick?.(row.original)}
                >
                  {row.getVisibleCells().map((cell) => (
                    <td
                      key={cell.id}
                      className="p-4 align-middle [&:has([role=checkbox])]:pr-0"
                    >
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </td>
                  ))}
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan={columns.length} className="h-24 text-center">
                  No hay resultados.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
      {pagination && <TablePagination table={table} />}
    </div>
  );
}

// Re-export the type helpers
export type { ColumnDef } from "@tanstack/react-table";


Ruta: config\navigation.ts
// config/navigation.ts
import {
  LayoutDashboard,
  Users,
  Settings,
  CreditCard,
  LineChart,
  MessagesSquare,
  UserPlus,
  HelpCircle,
  User,
  Boxes,
} from "lucide-react";

export const navigation = [
  {
    title: "Principal",
    items: [
      {
        name: "Dashboard",
        href: "/dashboard",
        icon: LayoutDashboard,
        description: "Vista general de tu cuenta",
      },
      {
        name: "Analytics",
        href: "/dashboard/analytics",
        icon: LineChart,
        description: "Estadísticas y métricas",
      },
    ],
  },
  {
    title: "Gestión",
    items: [
      {
        name: "Productos",
        href: "/dashboard/products",
        icon: Boxes,
        description: "Gestiona tus productos",
      },
      {
        name: "Clientes",
        href: "/dashboard/customers",
        icon: Users,
        description: "Administra tus clientes",
      },
      {
        name: "Mensajes",
        href: "/dashboard/messages",
        icon: MessagesSquare,
        description: "Centro de mensajes",
        badge: "3",
      },
    ],
  },
  {
    title: "Equipo",
    items: [
      {
        name: "Invitaciones",
        href: "/dashboard/invite",
        icon: UserPlus,
        description: "Invita nuevos miembros",
      },
      {
        name: "Miembros",
        href: "/dashboard/team",
        icon: Users,
        description: "Gestiona tu equipo",
      },
    ],
  },
  {
    title: "Cuenta",
    items: [
      {
        name: "Perfil",
        href: "/dashboard/profile",
        icon: User,
        description: "Tus datos personales",
      },
      {
        name: "Facturación",
        href: "/dashboard/billing",
        icon: CreditCard,
        description: "Planes y pagos",
      },
      {
        name: "Configuración",
        href: "/dashboard/settings",
        icon: Settings,
        description: "Preferencias de cuenta",
      },
      {
        name: "Ayuda",
        href: "/dashboard/help",
        icon: HelpCircle,
        description: "Soporte y documentación",
      },
    ],
  },
];


Ruta: lib\definitions.ts
// lib/definitions.ts
export type User = {
  id: string;
  name: string;
  email: string;
  password: string;
  role: string;
};

// Extendemos la sesión de NextAuth
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      name: string;
      email: string;
      role: string;
    };
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string;
    name: string;
    email: string;
    role: string;
  }
}


Ruta: lib\session.ts
// lib/session.ts
import { auth } from "@/auth";

export async function getSession() {
  try {
    const session = await auth();
    return session;
  } catch (error) {
    return null;
  }
}

export async function getCurrentUser() {
  try {
    const session = await getSession();
    return session?.user;
  } catch (error) {
    return null;
  }
}


Ruta: lib\themes.ts
// lib/themes.ts
export const themes = {
  default: {
    primary: {
      DEFAULT: "#6366F1", // Indigo-500
      foreground: "#FFFFFF",
      hover: "#4F46E5", // Indigo-600
      focus: "#4338CA", // Indigo-700
    },
    secondary: {
      DEFAULT: "#F3F4F6", // Gray-100
      foreground: "#374151", // Gray-700
      hover: "#E5E7EB", // Gray-200
      focus: "#D1D5DB", // Gray-300
    },
    background: {
      DEFAULT: "#FFFFFF",
      secondary: "#F9FAFB", // Gray-50
    },
    border: {
      DEFAULT: "#E5E7EB", // Gray-200
      focus: "#6366F1", // Indigo-500
    },
    ring: {
      DEFAULT: "#E5E7EB", // Gray-200
      focus: "#6366F1", // Indigo-500
    },
    content: {
      subtle: "#6B7280", // Gray-500
      DEFAULT: "#374151", // Gray-700
      emphasis: "#111827", // Gray-900
    },
    error: {
      DEFAULT: "#EF4444", // Red-500
      foreground: "#FFFFFF",
    },
    success: {
      DEFAULT: "#22C55E", // Green-500
      foreground: "#FFFFFF",
    },
  },
  dark: {
    // Tema oscuro que se puede personalizar...
  },
};

export type Theme = typeof themes.default;


Ruta: lib\utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

Ruta: lib\zod.ts
// lib/zod.ts
import { z } from "zod";

export const signInSchema = z.object({
  email: z
    .string({ required_error: "Email is required" })
    .min(1, "Email is required")
    .email("Invalid email"),
  password: z
    .string({ required_error: "Password is required" })
    .min(1, "Password is required")
    .min(4, "Password must be more than 4 characters") // Ajustado para demo
    .max(32, "Password must be less than 32 characters"),
});


Ruta: middleware.ts
// middleware.ts
import { auth } from "@/auth";
import { NextResponse } from "next/server";

export default auth((req) => {
  const token = req.auth?.user;
  const isLoggedIn = !!token;
  const isAuthRoute =
    req.nextUrl.pathname.startsWith("/login") ||
    req.nextUrl.pathname.startsWith("/register") ||
    req.nextUrl.pathname.startsWith("/forgot-password");

  // Add security headers
  const headers = new Headers(req.headers);
  headers.set("X-Frame-Options", "DENY");
  headers.set("X-Content-Type-Options", "nosniff");
  headers.set("Referrer-Policy", "same-origin");
  headers.set(
    "Content-Security-Policy",
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"
  );

  // Si está autenticado y trata de acceder a rutas de auth, redirigir al dashboard
  if (isLoggedIn && isAuthRoute) {
    return NextResponse.redirect(new URL("/dashboard", req.nextUrl));
  }

  // Si NO está autenticado y trata de acceder al dashboard, redirigir a login
  if (!isLoggedIn && req.nextUrl.pathname.startsWith("/dashboard")) {
    const redirectUrl = new URL("/login", req.nextUrl);
    redirectUrl.searchParams.set("from", req.nextUrl.pathname);
    return NextResponse.redirect(redirectUrl);
  }

  // Modificar la respuesta con los headers de seguridad
  const response = NextResponse.next({
    request: {
      headers,
    },
  });

  // Security: Remove powered-by header
  response.headers.delete("x-powered-by");

  return response;
});

export const config = {
  matcher: [
    // Rutas que requieren autenticación
    "/dashboard/:path*",
    // Rutas de autenticación
    "/login",
    "/register",
    "/forgot-password",
  ],
};


Ruta: next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


Ruta: next.config.ts
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;


Ruta: README.md
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


Ruta: tailwind.config.ts
// tailwind.config.ts
import { themes } from "./lib/themes";

import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        primary: {
          DEFAULT: themes.default.primary.DEFAULT,
          foreground: themes.default.primary.foreground,
          hover: themes.default.primary.hover,
          focus: themes.default.primary.focus,
        },
        secondary: {
          DEFAULT: themes.default.secondary.DEFAULT,
          foreground: themes.default.secondary.foreground,
          hover: themes.default.secondary.hover,
          focus: themes.default.secondary.focus,
        },
        background: {
          DEFAULT: themes.default.background.DEFAULT,
          secondary: themes.default.background.secondary,
        },
        border: {
          DEFAULT: themes.default.border.DEFAULT,
          focus: themes.default.border.focus,
        },
        ring: {
          DEFAULT: themes.default.ring.DEFAULT,
          focus: themes.default.ring.focus,
        },
        content: {
          subtle: themes.default.content.subtle,
          DEFAULT: themes.default.content.DEFAULT,
          emphasis: themes.default.content.emphasis,
        },
        error: {
          DEFAULT: themes.default.error.DEFAULT,
          foreground: themes.default.error.foreground,
        },
        success: {
          DEFAULT: themes.default.success.DEFAULT,
          foreground: themes.default.success.foreground,
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;


Ruta: tsconfig.json
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


Ruta: types\next-auth.d.ts
import "next-auth";

declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email: string;
      name: string;
      role: string;
      image?: string | null;
    };
    expires: string;
  }

  interface User {
    id: string;
    email: string;
    name: string;
    role: string;
    image?: string | null;
    emailVerified?: Date | null;
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string;
    email: string;
    name: string;
    role: string;
    image?: string | null;
  }
}


Ruta: utils\db.ts
// utils/db.ts
export async function getUserFromDb(email: string, hashedPassword: string) {
  // Para demo: Si el email es "test@example.com" y la contraseña (hasheada) es "test", se retorna el usuario.
  if (email === "test@example.com" && hashedPassword === "test") {
    return {
      id: "1",
      email,
      name: "Usuario de Prueba",
    };
  }
  return null;
}


Ruta: utils\password.ts
// utils/password.ts
export function saltAndHashPassword(password: string): string {
  // Para demo, simplemente se retorna la contraseña sin cambios.
  return password;
}

